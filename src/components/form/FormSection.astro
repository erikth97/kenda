---
/**
 * FormSection.astro
 * 
 * Componente que implementa la sección de formulario para distribuidores KENDA.
 * Incluye validación de campos y manejo de envío mediante JSON a Make webhook.
 * Con diseño responsive optimizado para dispositivos móviles.
 */
import Section from '../common/Section.astro';
import Container from '../../layouts/Container.astro';
---

<Section id="formulario" background="kenda-bg" spacing="lg">
  <!-- Cuadrícula uniforme sin degradados -->
  <div class="absolute inset-0 w-full h-full uniform-grid"></div>
  
  <!-- Contenido del formulario -->
  <Container size="md" className="max-w-3xl px-4 sm:px-6 md:px-8 relative z-10">
    <div class="bg-white rounded-3xl shadow-xl p-6 sm:p-8 md:p-12 border border-gray-100">
      <!-- Título y subtítulo con tamaño adaptativo -->
      <div class="text-center mb-12 md:mb-14">
        <h2 class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 mb-3">Formulario</h2>
        <p class="text-base sm:text-lg text-gray-700 font-medium">Más de 5,000 distribuidores</p>
      </div>
      
      <form id="distributor-form" class="space-y-6 sm:space-y-8 md:space-y-10">
        <!-- Campo Nombre -->
        <div class="mb-6 sm:mb-8 md:mb-10">
          <label for="nombre" class="block text-gray-800 font-semibold mb-3 text-base">Nombre completo</label>
          <input 
            type="text" 
            id="nombre" 
            name="nombre" 
            class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
            placeholder="Ej: Juan Pérez García"
            required 
            aria-describedby="error-nombre"
            aria-invalid="false"
          />
          <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-nombre" role="alert">Este campo es obligatorio</p>
        </div>
        
        <!-- Fila de Email y Teléfono con etiquetas fijas -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 mb-6 sm:mb-8 md:mb-10">
          <!-- Campo Email -->
          <div>
            <label for="email" class="block text-gray-800 font-semibold mb-3 text-base">Correo electrónico</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
              placeholder="tu@email.com"
              required 
              aria-describedby="error-email"
              aria-invalid="false"
            />
            <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-email" role="alert">Ingrese un correo electrónico válido</p>
          </div>
          
          <!-- Campo Celular/Teléfono -->
          <div>
            <label for="telefono" class="block text-gray-800 font-semibold mb-3 text-base">Teléfono</label>
            <input 
              type="tel" 
              id="telefono" 
              name="telefono" 
              class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
              placeholder="55 1234 5678"
              required 
              pattern="[\d\s\-\(\)\+]{10,15}"
              maxlength="15"
              title="Ingrese un número de teléfono mexicano válido"
              aria-describedby="error-telefono"
              aria-invalid="false"
            />
            <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-telefono" role="alert">Ingrese un teléfono válido (10 dígitos mínimo)</p>
          </div>
        </div>
        
        <!-- Campos de selección con mejor jerarquía visual y espaciado optimizado -->
        <div class="space-y-6 sm:space-y-8 md:space-y-10 mb-8 sm:mb-10 md:mb-12">
          <div>
            <label for="giroComercial" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Tienes un negocio enfocado al sector de motocicletas o autos?</label>
            <div class="relative">
              <select 
                id="giroComercial" 
                name="giroComercial" 
                class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-giroComercial"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona una opción</option>
                <option value="agencia" class="text-gray-900 font-medium">Agencia de autos</option>
                <option value="taller" class="text-gray-900 font-medium">Taller mecánico</option>
                <option value="refaccionaria" class="text-gray-900 font-medium">Refaccionaria</option>
                <option value="otro" class="text-gray-900 font-medium">Otro</option>
                <option value="no" class="text-gray-900 font-medium">No</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-giroComercial" role="alert">Seleccione una opción</p>
            </div>
          </div>
          
          <div>
            <label for="estado" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">Estado</label>
            <div class="relative">
              <select 
                id="estado" 
                name="estado" 
                class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-estado"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona tu estado</option>
                <option value="aguascalientes" class="text-gray-900 font-medium">Aguascalientes</option>
                <option value="baja-california" class="text-gray-900 font-medium">Baja California</option>
                <option value="baja-california-sur" class="text-gray-900 font-medium">Baja California Sur</option>
                <option value="campeche" class="text-gray-900 font-medium">Campeche</option>
                <option value="chiapas" class="text-gray-900 font-medium">Chiapas</option>
                <option value="chihuahua" class="text-gray-900 font-medium">Chihuahua</option>
                <option value="ciudad-de-mexico" class="text-gray-900 font-medium">Ciudad de México</option>
                <option value="coahuila" class="text-gray-900 font-medium">Coahuila</option>
                <option value="colima" class="text-gray-900 font-medium">Colima</option>
                <option value="durango" class="text-gray-900 font-medium">Durango</option>
                <option value="guanajuato" class="text-gray-900 font-medium">Guanajuato</option>
                <option value="guerrero" class="text-gray-900 font-medium">Guerrero</option>
                <option value="hidalgo" class="text-gray-900 font-medium">Hidalgo</option>
                <option value="jalisco" class="text-gray-900 font-medium">Jalisco</option>
                <option value="mexico" class="text-gray-900 font-medium">México</option>
                <option value="michoacan" class="text-gray-900 font-medium">Michoacán</option>
                <option value="morelos" class="text-gray-900 font-medium">Morelos</option>
                <option value="nayarit" class="text-gray-900 font-medium">Nayarit</option>
                <option value="nuevo-leon" class="text-gray-900 font-medium">Nuevo León</option>
                <option value="oaxaca" class="text-gray-900 font-medium">Oaxaca</option>
                <option value="puebla" class="text-gray-900 font-medium">Puebla</option>
                <option value="queretaro" class="text-gray-900 font-medium">Querétaro</option>
                <option value="quintana-roo" class="text-gray-900 font-medium">Quintana Roo</option>
                <option value="san-luis-potosi" class="text-gray-900 font-medium">San Luis Potosí</option>
                <option value="sinaloa" class="text-gray-900 font-medium">Sinaloa</option>
                <option value="sonora" class="text-gray-900 font-medium">Sonora</option>
                <option value="tabasco" class="text-gray-900 font-medium">Tabasco</option>
                <option value="tamaulipas" class="text-gray-900 font-medium">Tamaulipas</option>
                <option value="tlaxcala" class="text-gray-900 font-medium">Tlaxcala</option>
                <option value="veracruz" class="text-gray-900 font-medium">Veracruz</option>
                <option value="yucatan" class="text-gray-900 font-medium">Yucatán</option>
                <option value="zacatecas" class="text-gray-900 font-medium">Zacatecas</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-estado" role="alert">Seleccione una opción</p>
            </div>
          </div>
          
          <div>
            <label for="tipoNegocio" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Cuál es tu capital de inversión?</label>
            <div class="relative">
              <select 
                id="tipoNegocio" 
                name="tipoNegocio" 
                class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-tipoNegocio"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona el monto</option>
                <option value="1500000" class="text-gray-900 font-medium">$50,000 - $100,000 MXN</option>
                <option value="2000000" class="text-gray-900 font-medium">$100,000 - $250,000 MXN</option>
                <option value="mas-2000000" class="text-gray-900 font-medium">$250,000 - $500,000 MXN</option>
                <option value="mas-2000000" class="text-gray-900 font-medium">Más de $500,000 MXN</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-tipoNegocio" role="alert">Seleccione una opción</p>
            </div>
          </div>

          <div>
            <label for="iniciarOperaciones" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Cuándo te gustaría iniciar operaciones?</label>
            <div class="relative">
              <select 
                id="iniciarOperaciones" 
                name="inicioOperaciones" 
                class="w-full px-4 sm:px-5 py-3 sm:py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-iniciarOperaciones"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona el tiempo</option>
                <option value="3-meses" class="text-gray-900 font-medium">3 meses</option>
                <option value="6-meses" class="text-gray-900 font-medium">6 meses</option>
                <option value="12-meses" class="text-gray-900 font-medium">12 meses</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-iniciarOperaciones" role="alert">Seleccione una opción</p>
            </div>
          </div>
        </div>
        
        <!-- Botón de envío más prominente y centrado con responsive mejorado -->
        <div class="flex justify-center pt-6 sm:pt-8 pb-4">
<button 
  type="submit" 
  id="submit-button"
  class="w-full sm:w-auto px-8 sm:px-12 md:px-16 lg:px-20 py-3 sm:py-4 md:py-5 bg-kenda-orange hover:bg-orange-600 text-white font-bold text-base sm:text-lg rounded-full transition-all duration-300 pulse-effect transform hover:scale-105 hover:shadow-2xl focus:outline-none focus:ring-4 focus:ring-orange-300 disabled:opacity-70 disabled:cursor-not-allowed disabled:transform-none max-w-sm sm:max-w-none"
  aria-describedby="submit-status"
>
  <span class="flex items-center justify-center">
    <span id="button-text">Enviar formulario</span>
    <span id="button-spinner" class="ml-3 hidden animate-spin-once">
      <svg class="w-5 h-5 sm:w-6 sm:h-6 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </span>
  </span>
</button>


        </div>
        <div id="submit-status" class="sr-only" aria-live="polite"></div>
      </form>
    </div>
  </Container>
</Section>

<!-- Toast notification con diseño mejorado y responsive -->
<div id="toast-notification" class="fixed bottom-4 left-4 right-4 sm:bottom-4 sm:right-4 sm:left-auto bg-green-500 text-white rounded-xl shadow-xl z-50 hidden w-full sm:w-80 md:w-96 max-w-[calc(100vw-2rem)] sm:max-w-none overflow-hidden" role="alert" aria-live="assertive">
  <div class="flex items-start p-4 sm:p-5">
    <!-- Ícono SVG en cuadro redondeado -->
    <div class="flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center mr-3 sm:mr-4 mt-0.5">
      <!-- Ícono de éxito -->
      <svg id="toast-success-icon" class="w-6 h-6 sm:w-7 sm:h-7 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M5 13l4 4L19 7"></path>
      </svg>
      
      <!-- Ícono de error -->
      <svg id="toast-error-icon" class="w-6 h-6 sm:w-7 sm:h-7 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </div>
    
    <!-- Contenido del texto -->
    <div class="flex-1 min-w-0">
      <h4 id="toast-title" class="text-base sm:text-lg font-semibold text-white mb-1 leading-tight">¡Gracias por tu interés!</h4>
      <p id="toast-message" class="text-sm sm:text-base text-white opacity-90 leading-relaxed pr-2">Tu solicitud fue enviada exitosamente. Nuestro equipo se pondrá en contacto contigo pronto.</p>
    </div>
    
    <!-- Botón de cierre -->
    <button id="close-toast" class="flex-shrink-0 ml-2 sm:ml-4 w-6 h-6 sm:w-7 sm:h-7 text-white hover:text-gray-200 transition-colors duration-200 rounded-md hover:bg-white hover:bg-opacity-10 flex items-center justify-center" aria-label="Cerrar notificación">
      <svg class="h-4 w-4 sm:h-5 sm:w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  
  <!-- Barra de progreso opcional -->
  <div class="h-1 bg-white bg-opacity-20">
    <div id="toast-progress" class="h-full bg-white bg-opacity-40 transition-all duration-300 ease-linear" style="width: 100%"></div>
  </div>
</div>

<!-- Canvas para el confeti -->
<canvas id="confetti-canvas" class="fixed inset-0 pointer-events-none z-40 hidden" aria-hidden="true"></canvas>

<style>
  /* Cuadrícula uniforme sin degradados */
  .uniform-grid {
    background-image: 
      linear-gradient(rgba(255, 255, 255, 1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 1) 1px, transparent 1px);
    background-size: 40px 40px;
    background-position: center;
    z-index: 1;
  }
  
  /* Animación de un solo giro para el botón */
  @keyframes spin-once {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .animate-spin-once {
    animation: spin-once 0.5s ease-in-out forwards;
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Transiciones suaves para los campos y errores */
  .error-message {
    transition: all 0.3s ease;
  }
  
  input:focus, select:focus {
    transition: all 0.3s ease;
  }

  /* Estados de validación visual */
  .field-valid {
    border-color: #10b981 !important;
    background-color: #f0fdf4 !important;
  }
  
  .field-invalid {
    border-color: #ef4444 !important;
    background-color: #fef2f2 !important;
  }

  /* Efectos de hover mejorados para selects */
  select:hover + div svg {
    transform: rotate(180deg);
  }

  /* Mejorar contraste de placeholders */
  ::placeholder {
    color: #9CA3AF;
    opacity: 1;
  }

  /* Clases para lectores de pantalla */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  /* Animación de pulso simple y elegante */
@keyframes pulse-gentle {
  0%, 100% {
    transform: scale(1);
    box-shadow: 0 4px 15px rgba(255, 87, 34, 0.3);
  }
  50% {
    transform: scale(1.02);
    box-shadow: 0 6px 20px rgba(255, 87, 34, 0.4);
  }
}

.pulse-effect {
  animation: pulse-gentle 2s ease-in-out infinite;
}

.pulse-effect:hover {
  animation: pulse-gentle 1s ease-in-out infinite;
}

.pulse-effect:disabled {
  animation: none;
  box-shadow: none;
}
</style>
<script is:inline>
  // Script para validación y envío del formulario
  document.addEventListener('DOMContentLoaded', function() {
    // 1. Declaraciones de elementos
    const form = document.getElementById('distributor-form');
    const toastNotification = document.getElementById('toast-notification');
    const closeToastButton = document.getElementById('close-toast');
    const confettiCanvas = document.getElementById('confetti-canvas');
    const submitButton = document.getElementById('submit-button');
    const buttonText = document.getElementById('button-text');
    const buttonSpinner = document.getElementById('button-spinner');
    const submitStatus = document.getElementById('submit-status');
    
    // 2. Verificación de elementos
    if (!form || !toastNotification || !confettiCanvas || !submitButton) {
      console.error("Algunos elementos no se encontraron");
      return;
    }
    
    // 3. Variables globales del componente
    let toastTimer;
    const isMobile = window.innerWidth < 768;
    
    // 4. Funciones auxiliares mejoradas
    function showError(fieldId, show) {
      const errorElement = document.getElementById(`error-${fieldId}`);
      const fieldElement = document.getElementById(fieldId);
      
      if (errorElement && fieldElement) {
        if (show) {
          errorElement.classList.remove('hidden');
          fieldElement.classList.add('ring-2', 'ring-red-500', 'field-invalid');
          fieldElement.classList.remove('ring-kenda-orange', 'field-valid');
          fieldElement.setAttribute('aria-invalid', 'true');
        } else {
          errorElement.classList.add('hidden');
          fieldElement.classList.remove('ring-2', 'ring-red-500', 'field-invalid');
          fieldElement.setAttribute('aria-invalid', 'false');
        }
      }
    }
    
    function showSuccess(fieldId) {
      const fieldElement = document.getElementById(fieldId);
      if (fieldElement) {
        fieldElement.classList.add('field-valid');
        fieldElement.classList.remove('field-invalid', 'ring-red-500');
        fieldElement.setAttribute('aria-invalid', 'false');
      }
    }
    
    function validateField(field) {
      const fieldId = field.id;
      
      // Ocultar mensaje de error al iniciar validación
      showError(fieldId, false);
      
      // Validación especial para teléfono (formato mexicano mejorado)
      if (fieldId === 'telefono') {
        const value = field.value.replace(/\D/g, ''); // Quitar todo excepto números
        if (value.length < 10 || value.length > 15) {
          showError(fieldId, true);
          return false;
        }
        showSuccess(fieldId);
        return true;
      }
      
      // Para todos los demás campos, usar validación HTML5 básica
      const isValid = field.checkValidity();
      
      if (!isValid) {
        showError(fieldId, true);
        return false;
      }
      
      showSuccess(fieldId);
      return true;
    }
    
// 5. Función para mostrar el toast mejorada con iconos SVG
function showToast(type = 'success', message = 'Formulario enviado correctamente.', title = 'Success') {
  // Limpiar cualquier temporizador anterior
  if (toastTimer) {
    clearTimeout(toastTimer);
  }
  
  // Elementos del toast
  const toastEl = toastNotification;
  const titleEl = document.getElementById('toast-title');
  const messageEl = document.getElementById('toast-message');
  const successIcon = document.getElementById('toast-success-icon');
  const errorIcon = document.getElementById('toast-error-icon');
  const progressBar = document.getElementById('toast-progress');
  
  if (type === 'error') {
    // Configurar para error
    toastEl.classList.remove('bg-green-500');
    toastEl.classList.add('bg-red-500');
    titleEl.textContent = title || 'Error';
    
    // Mostrar ícono de error, ocultar éxito
    if (successIcon) successIcon.classList.add('hidden');
    if (errorIcon) errorIcon.classList.remove('hidden');
  } else {
    // Configurar para éxito
    toastEl.classList.remove('bg-red-500');
    toastEl.classList.add('bg-green-500');
    titleEl.textContent = title || '¡Éxito!';
    
    // Mostrar ícono de éxito, ocultar error
    if (errorIcon) errorIcon.classList.add('hidden');
    if (successIcon) successIcon.classList.remove('hidden');
  }
  
  messageEl.textContent = message;
  
  // Resetear y mostrar barra de progreso
  if (progressBar) {
    progressBar.style.width = '100%';
  }
  
  // Mostrar el toast
  toastNotification.classList.remove('hidden');
  
  // Animar barra de progreso
  if (progressBar) {
    setTimeout(() => {
      progressBar.style.width = '0%';
      progressBar.style.transition = 'width 15s linear';
    }, 100);
  }
  
  // Configurar el temporizador para ocultar después de 15 segundos
  toastTimer = setTimeout(function() {
    toastNotification.classList.add('hidden');
    // Resetear barra de progreso
    if (progressBar) {
      progressBar.style.width = '100%';
      progressBar.style.transition = 'width 0.3s ease-linear';
    }
  }, 15000);
}
    
    // 6. Animación de confeti mejorada
    const confettiAnimation = {
      canvas: confettiCanvas,
      ctx: null,
      particles: [],
      running: false,
      colors: [
        '#FF5722', '#FFC107', '#2196F3', 
        '#4CAF50', '#9C27B0', '#E91E63',
        '#FFEB3B', '#03A9F4', '#8BC34A'
      ],
      shapes: ['circle', 'square', 'triangle', 'line', 'star'],
      
      init: function() {
        this.ctx = this.canvas.getContext('2d');
        this.resize();
        window.addEventListener('resize', () => this.resize());
      },
      
      resize: function() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      },
      
      createParticle: function(x, y) {
        const sizeMultiplier = isMobile ? 0.7 : 1;
        const shape = this.shapes[Math.floor(Math.random() * this.shapes.length)];
        return {
          x: x || Math.random() * this.canvas.width,
          y: y || Math.random() * this.canvas.height * 0.5,
          size: (Math.random() * 10 + 5) * sizeMultiplier,
          color: this.colors[Math.floor(Math.random() * this.colors.length)],
          opacity: 1,
          shape: shape,
          velocity: {
            x: Math.random() * 6 - 3,
            y: Math.random() * -7 - 3
          },
          rotation: Math.random() * 360,
          rotationSpeed: Math.random() * 10 - 5,
          gravity: 0.1 + Math.random() * 0.1,
          friction: 0.95 + Math.random() * 0.04,
          wobble: Math.random() * 0.2,
          wobbleSpeed: Math.random() * 0.1,
          bounceLimit: Math.floor(Math.random() * 3) + 2,
          bounceCount: 0
        };
      },
      
      drawParticle: function(p) {
        this.ctx.save();
        this.ctx.translate(p.x, p.y);
        this.ctx.rotate(p.rotation * Math.PI / 180);
        this.ctx.globalAlpha = p.opacity;
        this.ctx.fillStyle = p.color;
        
        switch(p.shape) {
          case 'circle':
            this.ctx.beginPath();
            this.ctx.arc(0, 0, p.size / 2, 0, Math.PI * 2);
            this.ctx.fill();
            break;
            
          case 'square':
            this.ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);
            break;
            
          case 'triangle':
            this.ctx.beginPath();
            this.ctx.moveTo(0, -p.size / 2);
            this.ctx.lineTo(-p.size / 2, p.size / 2);
            this.ctx.lineTo(p.size / 2, p.size / 2);
            this.ctx.closePath();
            this.ctx.fill();
            break;
            
          case 'line':
            this.ctx.strokeStyle = p.color;
            this.ctx.lineWidth = p.size / 5;
            this.ctx.beginPath();
            this.ctx.moveTo(-p.size, 0);
            this.ctx.lineTo(p.size, 0);
            this.ctx.stroke();
            break;
            
          case 'star':
            this.ctx.beginPath();
            const spikes = 5;
            const outerRadius = p.size / 2;
            const innerRadius = p.size / 4;
            
            for (let i = 0; i < spikes * 2; i++) {
              const radius = i % 2 === 0 ? outerRadius : innerRadius;
              const angle = (i / (spikes * 2)) * Math.PI * 2;
              const x = Math.cos(angle) * radius;
              const y = Math.sin(angle) * radius;
              
              if (i === 0) {
                this.ctx.moveTo(x, y);
              } else {
                this.ctx.lineTo(x, y);
              }
            }
            
            this.ctx.closePath();
            this.ctx.fill();
            break;
        }
        
        this.ctx.restore();
      },
      
      updateParticle: function(p) {
        p.x += Math.sin(Date.now() * p.wobbleSpeed) * p.wobble;
        p.velocity.y += p.gravity;
        p.velocity.x *= p.friction;
        p.velocity.y *= p.friction;
        p.x += p.velocity.x;
        p.y += p.velocity.y;
        p.rotation += p.rotationSpeed;
        p.opacity -= 0.005;
        
        if (p.y >= this.canvas.height - p.size && p.bounceCount < p.bounceLimit) {
          p.velocity.y *= -0.6;
          p.y = this.canvas.height - p.size;
          p.bounceCount++;
          p.size *= 0.9;
        }
        
        if (p.x <= p.size || p.x >= this.canvas.width - p.size) {
          p.velocity.x *= -0.5;
          if (p.x <= p.size) p.x = p.size;
          if (p.x >= this.canvas.width - p.size) p.x = this.canvas.width - p.size;
        }
        
        return p.opacity > 0.05 && p.size > 1;
      },
      
      animate: function() {
        if (!this.running) return;
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        for (let i = 0; i < this.particles.length; i++) {
          const p = this.particles[i];
          if (this.updateParticle(p)) {
            this.drawParticle(p);
          } else {
            this.particles.splice(i, 1);
            i--;
          }
        }
        
        if (this.particles.length === 0) {
          this.running = false;
          this.canvas.classList.add('hidden');
          return;
        }
        
        requestAnimationFrame(() => this.animate());
      },
      
      start: function() {
        this.canvas.classList.remove('hidden');
        this.resize();
        this.particles = [];
        this.running = true;
        
        const numPoints = isMobile ? 3 : 5;
        const particlesPerPoint = isMobile ? 20 : 30;
        const pointSpacing = this.canvas.width / numPoints;
        
        for (let j = 0; j < numPoints; j++) {
          const originX = pointSpacing * j + (pointSpacing / 2) + (Math.random() * 100 - 50);
          const originY = -20 + (Math.random() * 40);
          
          for (let i = 0; i < particlesPerPoint; i++) {
            this.particles.push(this.createParticle(originX, originY));
          }
        }
        
        this.animate();
      }
    };
    
// 7. Control del botón simplificado
function controlPulseAnimation() {
  const submitBtn = document.getElementById('submit-button');
  
  // El botón siempre mantiene su animación pulse-effect
  // No necesita lógica adicional ya que se maneja por CSS
  if (submitBtn && !submitBtn.classList.contains('pulse-effect')) {
    submitBtn.classList.add('pulse-effect');
  }
}
    
    // 8. Event listeners para campos del formulario mejorados
    const formFields = form.querySelectorAll('input, select');
    formFields.forEach(field => {
      field.addEventListener('blur', function() {
        validateField(this);
      });
      
      field.addEventListener('input', function() {
        // Para el teléfono, formatear entrada
        if (this.id === 'telefono') {
          let value = this.value.replace(/\D/g, '');
          if (value.length > 10) {
            value = value.slice(0, 15);
          }
          this.value = value;
        }
        showError(this.id, false);
        
        // Quitar estado de validación al modificar
        this.classList.remove('field-valid', 'field-invalid');
      });
      
      if (field.tagName === 'SELECT') {
        field.addEventListener('change', function() {
          validateField(this);
        });
      }
    });
    
    // 9. Event listeners principales
    closeToastButton.addEventListener('click', function() {
      if (toastTimer) {
        clearTimeout(toastTimer);
      }
      toastNotification.classList.add('hidden');
    });
    
// Manejar el envío del formulario mejorado
    // Manejar el envío del formulario mejorado
form.addEventListener('submit', async function(e) {
  e.preventDefault();
  
  // Limpiar mensajes previos
  submitStatus.textContent = '';
  const errorMessages = document.querySelectorAll('.error-message');
  errorMessages.forEach(msg => {
    msg.classList.add('hidden');
  });
  
  // Validar todos los campos
  let isValid = true;
  formFields.forEach(field => {
    if (!validateField(field)) {
      isValid = false;
    }
  });
  
  if (!isValid) {
    showToast('error', 'Por favor complete todos los campos correctamente.', 'Error');
    submitStatus.textContent = 'Error: Formulario incompleto';
    return;
  }
  
  // Estado de carga
  submitButton.disabled = true;
  buttonText.textContent = 'Enviando...';
  buttonSpinner.classList.remove('hidden');
  submitStatus.textContent = 'Enviando formulario...';
  
  try {
    const formData = new FormData(form);
    const formObject = {};
    
    formData.forEach(function(value, key) {
      formObject[key] = value;
    });
    
    console.log("Datos del formulario a enviar:", JSON.stringify(formObject, null, 2));
    
    const MAKE_WEBHOOK_URL = 'https://hook.us2.make.com/3mknzgigjscwegtansipvrz0163zko73';
    
    // ✅ FETCH REQUEST CON VALIDACIÓN MEJORADA PARA MAKE.COM
    const response = await fetch(MAKE_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(formObject)
    });
    
    console.log("Status de respuesta:", response.status);
    
    // Make.com puede devolver 200, 201, 202, o incluso 204 como éxito
    if (response.status >= 200 && response.status < 300) {
      // Respuesta exitosa
      let responseData = {};
      
      try {
        // Intentar parsear JSON solo si hay contenido
        const textResponse = await response.text();
        if (textResponse) {
          responseData = JSON.parse(textResponse);
        }
      } catch (parseError) {
        // Si no se puede parsear JSON, no es un error crítico
        console.log("Respuesta sin JSON válido, pero request exitoso");
        responseData = { status: 'success' };
      }
      
      console.log("Respuesta del servidor:", responseData);
      
      // ✅ ÉXITO - Mostrar toast de éxito y confeti
      showToast('success', 'Tu solicitud fue enviada exitosamente. Nuestro equipo se pondrá en contacto contigo pronto.', '¡Gracias por tu interés!');
      confettiAnimation.start();
      submitStatus.textContent = 'Formulario enviado exitosamente';
      
      // Resetear formulario
      form.reset();
      
      // Limpiar estados visuales
      formFields.forEach(field => {
        field.classList.remove('field-valid', 'field-invalid');
        field.setAttribute('aria-invalid', 'false');
      });
      
      setTimeout(() => {
        controlPulseAnimation();
      }, 100);
      
    } else {
      // ❌ ERROR REAL DEL SERVIDOR
      const errorText = await response.text();
      console.error("Error del servidor:", response.status, errorText);
      throw new Error(`Error HTTP ${response.status}: ${errorText}`);
    }
    
  } catch (error) {
    console.error("Error al enviar el formulario:", error);
    showToast('error', 'Hubo un error al enviar el formulario. Por favor, intente nuevamente.', 'Error');
    submitStatus.textContent = 'Error al enviar el formulario';
  } finally {
    submitButton.disabled = false;
    buttonText.textContent = 'Enviar formulario';
    buttonSpinner.classList.add('hidden');
  }
});

    // 10. Inicializaciones
    confettiAnimation.init();
    controlPulseAnimation();
    
    // 11. Funciones para pruebas
    window.testToast = function() {
      showToast('success', 'Tu solicitud fue enviada exitosamente. Nuestro equipo se pondrá en contacto contigo pronto.', '¡Gracias por tu interés!');
    };
    
    window.testConfetti = function() {
      confettiAnimation.start();
    };
    
    window.testBoth = function() {
      showToast('success', 'Tu solicitud fue enviada exitosamente. Nuestro equipo se pondrá en contacto contigo pronto.', '¡Gracias por tu interés!');
      confettiAnimation.start();
    };
    
    window.testValidation = function(fieldId, value) {
      const campo = document.getElementById(fieldId);
      if (campo) {
        campo.value = value;
        const esValido = validateField(campo);
        console.log(`Campo "${fieldId}" con valor "${value}" es válido: ${esValido}`);
        return esValido;
      }
    };
  });
</script>)