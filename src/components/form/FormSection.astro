---
/**
 * FormSection.astro
 * 
 * Componente que implementa la sección de formulario para distribuidores KENDA.
 * Incluye validación de campos y manejo de envío mediante JSON a Make webhook.
 * Con diseño responsive optimizado para dispositivos móviles.
 */
import Section from '../common/Section.astro';
import Container from '../../layouts/Container.astro';
---

<Section id="formulario" background="kenda-bg" spacing="lg">
  <!-- Degradado suave al inicio de la sección -->
  <div class="absolute top-0 left-0 right-0 h-20 bg-gradient-to-b from-[#f8f9fa]/40 via-[#F5F5F5]/70 to-[#F5F5F5] pointer-events-none z-10"></div>
  <!-- Cuadrícula uniforme sin degradados -->
  <div class="absolute inset-0 w-full h-full uniform-grid"></div>
  
  <!-- Contenido del formulario -->
  <Container size="md" className="max-w-3xl px-4 sm:px-6 md:px-8 relative z-10">
    <div class="bg-white rounded-3xl shadow-xl p-6 sm:p-8 md:p-12 border border-gray-100">
      <!-- Título y subtítulo con tamaño adaptativo -->
      <div class="text-center mb-12 md:mb-14">
        <h2 class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 mb-3">Formulario</h2>
        <p class="text-base sm:text-lg text-gray-700 font-medium">Más de 5,000 distribuidores</p>
      </div>
      
      <form id="distributor-form" class="space-y-4 sm:space-y-6 md:space-y-8">
        <!-- Campo Nombre -->
        <div class="mb-4 sm:mb-6 md:mb-8">
          <label for="nombre" class="block text-gray-800 font-semibold mb-3 text-base">Nombre completo</label>
          <div class="relative">
            <input 
              type="text" 
              id="nombre" 
              name="nombre" 
              autocomplete="given-name family-name"
              class="w-full px-4 sm:px-5 py-3 sm:py-4 pr-12 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
              placeholder="Ej: Juan Pérez García"
              required 
              aria-describedby="error-nombre"
              aria-invalid="false"
            />
            <!-- Iconos de validación -->
            <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <svg class="field-success-icon hidden w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <svg class="field-error-icon hidden w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </div>
          </div>
          <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-nombre" role="alert">Este campo es obligatorio</p>
        </div>
        
        <!-- Fila de Email y Teléfono con etiquetas fijas -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 mb-4 sm:mb-6 md:mb-8">
          <!-- Campo Email -->
          <div>
            <label for="email" class="block text-gray-800 font-semibold mb-3 text-base">Correo electrónico</label>
            <div class="relative">
              <input 
                type="email" 
                id="email" 
                name="email" 
                autocomplete="email"
                class="w-full px-4 sm:px-5 py-3 sm:py-4 pr-12 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
                placeholder="tu@email.com"
                required 
                aria-describedby="error-email"
                aria-invalid="false"
              />
              <!-- Iconos de validación -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="field-success-icon hidden w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <svg class="field-error-icon hidden w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </div>
            </div>
            <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-email" role="alert">Ingrese un correo electrónico válido</p>
          </div>
          
          <!-- Campo Celular/Teléfono -->
          <div>
            <label for="telefono" class="block text-gray-800 font-semibold mb-3 text-base">Teléfono</label>
            <div class="relative">
              <input 
                type="tel" 
                id="telefono" 
                name="telefono" 
                autocomplete="tel"
                class="w-full px-4 sm:px-5 py-3 sm:py-4 pr-12 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium placeholder-gray-500" 
                placeholder="55 1234 5678"
                required 
                pattern="[0-9\s\-]{10,19}"
                maxlength="19"
                title="Ingrese un número de teléfono válido (solo números, espacios y guiones)"
                aria-describedby="error-telefono"
                aria-invalid="false"
              />
              <!-- Iconos de validación -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="field-success-icon hidden w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <svg class="field-error-icon hidden w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </div>
            </div>
            <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-telefono" role="alert">Ingrese un teléfono válido (10 dígitos mínimo)</p>
          </div>
        </div>
        
        <!-- Campos de selección con mejor jerarquía visual y espaciado optimizado -->
        <div class="space-y-4 sm:space-y-6 md:space-y-8 mb-6 sm:mb-8 md:mb-10">
          <div>
            <label for="giroComercial" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Tienes un negocio enfocado al sector de motocicletas o autos?</label>
            <div class="relative">
              <select 
                id="giroComercial" 
                name="giroComercial" 
                class="w-full px-4 sm:px-5 py-4 sm:py-5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-giroComercial"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona una opción</option>
                <option value="agencia" class="text-gray-900 font-medium">Agencia de motos</option>
                <option value="taller" class="text-gray-900 font-medium">Taller mecánico</option>
                <option value="refaccionaria" class="text-gray-900 font-medium">Refaccionaria</option>
                <option value="otro" class="text-gray-900 font-medium">Otro</option>
                <option value="no" class="text-gray-900 font-medium">No</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-giroComercial" role="alert">Seleccione una opción</p>
            </div>
          </div>
          
          <div>
            <label for="estado" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">Estado</label>
            <div class="relative">
              <select 
                id="estado" 
                name="estado" 
                class="w-full px-4 sm:px-5 py-4 sm:py-5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-estado"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona tu estado</option>
                <option value="aguascalientes" class="text-gray-900 font-medium">Aguascalientes</option>
                <option value="baja-california" class="text-gray-900 font-medium">Baja California</option>
                <option value="baja-california-sur" class="text-gray-900 font-medium">Baja California Sur</option>
                <option value="campeche" class="text-gray-900 font-medium">Campeche</option>
                <option value="chiapas" class="text-gray-900 font-medium">Chiapas</option>
                <option value="chihuahua" class="text-gray-900 font-medium">Chihuahua</option>
                <option value="ciudad-de-mexico" class="text-gray-900 font-medium">Ciudad de México</option>
                <option value="coahuila" class="text-gray-900 font-medium">Coahuila</option>
                <option value="colima" class="text-gray-900 font-medium">Colima</option>
                <option value="durango" class="text-gray-900 font-medium">Durango</option>
                <option value="guanajuato" class="text-gray-900 font-medium">Guanajuato</option>
                <option value="guerrero" class="text-gray-900 font-medium">Guerrero</option>
                <option value="hidalgo" class="text-gray-900 font-medium">Hidalgo</option>
                <option value="jalisco" class="text-gray-900 font-medium">Jalisco</option>
                <option value="mexico" class="text-gray-900 font-medium">México</option>
                <option value="michoacan" class="text-gray-900 font-medium">Michoacán</option>
                <option value="morelos" class="text-gray-900 font-medium">Morelos</option>
                <option value="nayarit" class="text-gray-900 font-medium">Nayarit</option>
                <option value="nuevo-leon" class="text-gray-900 font-medium">Nuevo León</option>
                <option value="oaxaca" class="text-gray-900 font-medium">Oaxaca</option>
                <option value="puebla" class="text-gray-900 font-medium">Puebla</option>
                <option value="queretaro" class="text-gray-900 font-medium">Querétaro</option>
                <option value="quintana-roo" class="text-gray-900 font-medium">Quintana Roo</option>
                <option value="san-luis-potosi" class="text-gray-900 font-medium">San Luis Potosí</option>
                <option value="sinaloa" class="text-gray-900 font-medium">Sinaloa</option>
                <option value="sonora" class="text-gray-900 font-medium">Sonora</option>
                <option value="tabasco" class="text-gray-900 font-medium">Tabasco</option>
                <option value="tamaulipas" class="text-gray-900 font-medium">Tamaulipas</option>
                <option value="tlaxcala" class="text-gray-900 font-medium">Tlaxcala</option>
                <option value="veracruz" class="text-gray-900 font-medium">Veracruz</option>
                <option value="yucatan" class="text-gray-900 font-medium">Yucatán</option>
                <option value="zacatecas" class="text-gray-900 font-medium">Zacatecas</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-estado" role="alert">Seleccione una opción</p>
            </div>
            
            <!-- 🆕 NUEVO: Elemento para mostrar información del promotor -->
            <div id="promotor-info" class="hidden mt-3" role="status" aria-live="polite">
              <!-- Contenido dinámico se insertará aquí -->
            </div>
          </div>
          
          <!-- 🆕 NUEVO: Campo Municipio -->
          <div id="municipio-container" class="hidden">
            <label for="municipio" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">Municipio</label>
            <div class="relative">
              <select 
                id="municipio" 
                name="municipio" 
                class="w-full px-4 sm:px-5 py-4 sm:py-5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-municipio"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona tu municipio</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-municipio" role="alert">Seleccione un municipio</p>
            </div>
          </div>
          
          <div>
            <label for="tipoNegocio" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Cuál es tu capital de inversión?</label>
            <div class="relative">
              <select 
                id="tipoNegocio" 
                name="tipoNegocio" 
                class="w-full px-4 sm:px-5 py-4 sm:py-5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-tipoNegocio"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona el monto</option>
                <option value="50k-100k" class="text-gray-900 font-medium">$50,000 - $100,000 MXN</option>
                <option value="100k-250k" class="text-gray-900 font-medium">$100,000 - $250,000 MXN</option>
                <option value="250k-500k" class="text-gray-900 font-medium">$250,000 - $500,000 MXN</option>
                <option value="mas-500k" class="text-gray-900 font-medium">Más de $500,000 MXN</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-tipoNegocio" role="alert">Seleccione una opción</p>
            </div>
          </div>

          <div>
            <label for="iniciarOperaciones" class="block text-gray-800 font-semibold mb-4 text-base leading-relaxed">¿Cuándo te gustaría iniciar operaciones?</label>
            <div class="relative">
              <select 
                id="iniciarOperaciones" 
                name="inicioOperaciones" 
                class="w-full px-4 sm:px-5 py-4 sm:py-5 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-kenda-orange focus:border-kenda-orange focus:outline-none appearance-none transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 text-gray-900 font-medium cursor-pointer" 
                required
                aria-describedby="error-iniciarOperaciones"
                aria-invalid="false"
              >
                <option value="" disabled selected class="text-gray-400 italic">Selecciona el tiempo</option>
                <option value="3-meses" class="text-gray-900 font-medium">3 meses</option>
                <option value="6-meses" class="text-gray-900 font-medium">6 meses</option>
                <option value="12-meses" class="text-gray-900 font-medium">12 meses</option>
              </select>
              <!-- Ícono de flecha para el select -->
              <div class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none">
                <svg class="w-5 h-5 text-gray-600 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <p class="error-message text-red-600 text-sm mt-2 ml-1 hidden font-medium" id="error-iniciarOperaciones" role="alert">Seleccione una opción</p>
            </div>
          </div>
        </div>
        
        <!-- Botón de envío más prominente y centrado con responsive mejorado -->
        <div class="flex justify-center pt-6 sm:pt-8 pb-4">
          <button 
            type="submit" 
            id="submit-button"
            class="w-full sm:w-auto px-8 sm:px-12 md:px-16 lg:px-20 py-3 sm:py-4 md:py-5 bg-kenda-orange hover:bg-orange-600 text-white font-bold text-base sm:text-lg rounded-full transition-all duration-300 pulse-effect transform hover:scale-105 hover:shadow-2xl focus:outline-none focus:ring-4 focus:ring-orange-300 disabled:opacity-70 disabled:cursor-not-allowed disabled:transform-none max-w-sm sm:max-w-none"
            aria-describedby="submit-status"
          >
            <span class="flex items-center justify-center">
              <span id="button-text">Enviar formulario</span>
              <span id="button-spinner" class="ml-3 hidden animate-spin-once">
                <svg class="w-5 h-5 sm:w-6 sm:h-6 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </span>
          </button>
        </div>
        <div id="submit-status" class="sr-only" aria-live="polite"></div>
      </form>
    </div>
  </Container>
</Section>

<!-- Minimalist Toast Notification -->
<div id="toast-notification" class="toast-container fixed bottom-6 right-6 z-50 hidden w-full sm:w-96 max-w-[calc(100vw-2rem)] sm:max-w-96" role="alert" aria-live="assertive">
  <!-- Clean white container with subtle shadow -->
  <div class="bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
    
    <!-- Content with better spacing -->
    <div class="flex items-start p-4 pr-10">
      <!-- Minimalist icon -->
      <div class="flex-shrink-0 mr-3">
        <div class="w-5 h-5 rounded-full flex items-center justify-center">
          <!-- Success icon -->
          <svg id="toast-success-icon" class="w-5 h-5 text-emerald-500 opacity-0" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.236 4.53L8.22 10.653a.75.75 0 00-1.06 1.061l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z" clip-rule="evenodd" />
          </svg>
          
          <!-- Error icon -->
          <svg id="toast-error-icon" class="w-5 h-5 text-red-500 opacity-0" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      
      <!-- Clean typography -->
      <div class="flex-1 min-w-0">
        <h4 id="toast-title" class="text-sm font-medium text-gray-900 mb-1">¡Éxito!</h4>
        <p id="toast-message" class="text-sm text-gray-600 leading-5">Tu solicitud fue enviada exitosamente.</p>
      </div>
    </div>
    
    <!-- Clean close button -->
    <button id="close-toast" class="toast-close-btn absolute top-3 right-3 w-6 h-6 rounded-md flex items-center justify-center text-gray-400 hover:text-gray-600" aria-label="Cerrar notificación">
      <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Simple progress bar -->
    <div class="h-1 bg-gray-100">
      <div id="toast-progress" class="h-full transition-all duration-75 ease-linear" style="width: 100%"></div>
    </div>
  </div>
</div>

<!-- Canvas para el confeti -->
<canvas id="confetti-canvas" class="fixed inset-0 pointer-events-none z-40 hidden" aria-hidden="true"></canvas>

<!-- Auto-save indicator -->
<div id="auto-save-indicator" class="auto-save-indicator">
  <div class="flex items-center space-x-2">
    <svg class="w-4 h-4 animate-spin hidden" id="save-spinner" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <svg class="w-4 h-4" id="save-check" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
    </svg>
    <span id="save-text">Datos guardados</span>
  </div>
</div>

<style>
  /* Cuadrícula uniforme sin degradados */
  .uniform-grid {
    background-image: 
      linear-gradient(rgba(255, 255, 255, 1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 1) 1px, transparent 1px);
    background-size: 40px 40px;
    background-position: center;
    z-index: 1;
  }
  
  /* Animación de un solo giro para el botón */
  @keyframes spin-once {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .animate-spin-once {
    animation: spin-once 0.5s ease-in-out forwards;
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Transiciones suaves para los campos y errores */
  .error-message {
    transition: all 0.3s ease;
  }
  
  input:focus, select:focus {
    transition: all 0.3s ease;
  }

  /* Estados de validación visual mejorados */
  .field-valid {
    border-color: #10b981 !important;
    background-color: #f0fdf4 !important;
  }
  
  .field-invalid {
    border-color: #ef4444 !important;
    background-color: #fef2f2 !important;
  }

  /* Iconos de validación */
  .field-success-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.3s ease;
  }

  .field-error-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.3s ease;
  }

  .field-valid .field-success-icon {
    opacity: 1;
    transform: scale(1);
  }

  .field-invalid .field-error-icon {
    opacity: 1;
    transform: scale(1);
  }

  /* Auto-save indicator */
  .auto-save-indicator {
    position: fixed;
    top: 20px;
    right: 20px;
    background: rgba(16, 185, 129, 0.9);
    color: white;
    padding: 8px 16px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
    backdrop-filter: blur(10px);
  }

  .auto-save-indicator.show {
    opacity: 1;
    transform: translateY(0);
  }

  .auto-save-indicator.error {
    background: rgba(239, 68, 68, 0.9);
  }

  /* Efectos de hover mejorados para selects */
  select:hover + div svg {
    transform: rotate(180deg);
  }

  /* Mejorar contraste de placeholders */
  ::placeholder {
    color: #9CA3AF;
    opacity: 1;
  }

  /* Clases para lectores de pantalla */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Animación de pulso simple y elegante */
  @keyframes pulse-gentle {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 4px 15px rgba(255, 87, 34, 0.3);
    }
    50% {
      transform: scale(1.02);
      box-shadow: 0 6px 20px rgba(255, 87, 34, 0.4);
    }
  }

  .pulse-effect {
    animation: pulse-gentle 2s ease-in-out infinite;
  }

  .pulse-effect:hover {
    animation: pulse-gentle 1s ease-in-out infinite;
  }

  .pulse-effect:disabled {
    animation: none;
    box-shadow: none;
  }

  /* 🎨 Minimalist Toast Notification */
  .toast-container {
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .toast-container:not(.hidden) {
    transform: translateY(0);
    opacity: 1;
  }

  .toast-close-btn {
    transition: all 0.2s ease;
  }

  .toast-close-btn:hover {
    background: #f3f4f6;
    color: #374151;
  }

  /* Success state styling */
  .toast-success {
    border-left: 3px solid #10b981;
    background: #ffffff;
  }

  /* Error state styling */
  .toast-error {
    border-left: 3px solid #ef4444;
    background: #ffffff;
  }

  /* Remove shimmer animation - keep simple */
  #toast-progress {
    background: #e5e7eb;
    transition: width 0.2s ease;
  }

  #toast-progress.success {
    background: #10b981;
  }

  #toast-progress.error {
    background: #ef4444;
  }

  /* Icon improvements */
  #toast-success-icon,
  #toast-error-icon {
    transition: opacity 0.2s ease;
  }

  /* Mobile optimizations */
  @media (max-width: 640px) {
    .toast-container {
      bottom: 1rem;
      left: 1rem;
      right: 1rem;
      width: auto;
      max-width: none;
    }
    
    #toast-notification .bg-white {
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .toast-container {
      transition: opacity 0.2s ease;
      transform: none !important;
    }
    
    #toast-progress {
      transition: none !important;
    }
  }
</style>

<script is:inline>
  // 🆕 NUEVO: Base de datos de promotores por estado con estructura mejorada
  const PROMOTORES_POR_ESTADO = {
    'aguascalientes': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER PEÑA',
      whatsapp: '6671207132',
      email: 'ventas.pacifico2@motosyequipos.com',
      zonas: ['ZACATECAS', 'AGUASCALIENTES', 'NAYARIT', 'JALISCO']
    },
    'baja-california': {
      tipo: 'simple',
      nombre: 'CHRISTIAN PAUL DAVIZON VILLEGAS',
      whatsapp: '6691229912',
      email: 'ventas.pacifico3@motosyequipos.com',
      zonas: ['SINALOA', 'SONORA', 'BAJA CALIFORNIA SUR', 'NORTE Y DURANGO']
    },
    'baja-california-sur': {
      tipo: 'simple',
      nombre: 'CHRISTIAN PAUL DAVIZON VILLEGAS',
      whatsapp: '6691229912',
      email: 'ventas.pacifico3@motosyequipos.com',
      zonas: ['SINALOA', 'SONORA', 'BAJA CALIFORNIA SUR', 'NORTE Y DURANGO']
    },
    'campeche': {
      tipo: 'multiple',
      asesores: [
        {
          nombre: 'ULISES MARTIN VILLEGAS',
          whatsapp: '9993965148',
          email: 'ventas.peninsula@motosyequipos.com',
          prioridad: 'principal',
          zonas: ['YUCATÁN', 'CAMPECHE', 'QUINTANA ROO']
        },
        {
          nombre: 'JORGE URTECHO REJON',
          whatsapp: '9991098579',
          email: 'ventas.golfosur@motosyequipos.com',
          prioridad: 'alternativo',
          zonas: ['CAMPECHE(NTE.)', 'TABASCO', 'VERACRUZ (SUR)']
        }
      ]
    },
    'chiapas': {
      tipo: 'simple',
      nombre: 'JOSE DANIEL RAMOS MARTÍNEZ',
      whatsapp: '9626225169',
      email: 'ventas.suroeste@motosyequipos.com',
      zonas: ['CHIAPAS']
    },
    'chihuahua': {
      tipo: 'simple',
      nombre: 'JUAN CARLOS HERNANDEZ PACHECO',
      whatsapp: '8126229318',
      email: 'ventas.norte@motosyequipos.com',
      zonas: ['CHIHUAHUA', 'NUEVO LEON', 'COAHUILA', 'TAMAULIPAS']
    },
    'ciudad-de-mexico': {
      tipo: 'multiple',
      asesores: [
        {
          nombre: 'ALEJANDRO ROBERTO PIÑA GARCIA',
          whatsapp: '5527378228',
          email: 'ventas.sur@motosyequipos.com',
          prioridad: 'principal',
          zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
        },
        {
          nombre: 'SERGIO AARON CARDENAS GARCIA',
          whatsapp: '5543038476',
          email: 'ventas.sureste@motosyequipos.com',
          prioridad: 'alternativo',
          zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
        }
      ]
    },
    'coahuila': {
      tipo: 'simple',
      nombre: 'JUAN CARLOS HERNANDEZ PACHECO',
      whatsapp: '8126229318',
      email: 'ventas.norte@motosyequipos.com',
      zonas: ['CHIHUAHUA', 'NUEVO LEON', 'COAHUILA', 'TAMAULIPAS']
    },
    'colima': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER RENTERIA',
      whatsapp: '3311520857',
      email: 'ventas.jalisco@motosyequipos.com',
      zonas: ['JALISCO', 'COLIMA', 'MICHOACÁN']
    },
    'durango': {
      tipo: 'simple',
      nombre: 'CHRISTIAN PAUL DAVIZON VILLEGAS',
      whatsapp: '6691229912',
      email: 'ventas.pacifico3@motosyequipos.com',
      zonas: ['SINALOA', 'SONORA', 'BAJA CALIFORNIA SUR', 'NORTE Y DURANGO']
    },
    'guanajuato': {
      tipo: 'simple',
      nombre: 'RICARDO REBOLLEDO ORTIZ',
      whatsapp: '4451042272',
      email: 'ventas.bajio@motosyequipos.com',
      zonas: ['GUANAJUATO', 'SAN LUIS POTOSÍ']
    },
    'guerrero': {
      tipo: 'simple',
      nombre: 'IVÁN HERNÁNDEZ LEAL',
      whatsapp: '3511779622',
      email: 'ventas.pacifico4@motosyequipos.com',
      zonas: ['GUERRERO', 'MORELOS', 'MICHOACÁN']
    },
    'hidalgo': {
      tipo: 'simple',
      nombre: 'OCTAVIO NAVARRETE FERNANDEZ',
      whatsapp: '5562404656',
      email: 'ventas.mexico@motosyequipos.com',
      zonas: ['HIDALGO', 'QUERÉTARO', 'EDO. MEXICO']
    },
    'jalisco': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER RENTERIA',
      whatsapp: '3311520857',
      email: 'ventas.jalisco@motosyequipos.com',
      zonas: ['JALISCO', 'COLIMA', 'MICHOACÁN']
    },
    'mexico': {
      tipo: 'multiple',
      asesores: [
        {
          nombre: 'ALEJANDRO ROBERTO PIÑA GARCIA',
          whatsapp: '5527378228',
          email: 'ventas.sur@motosyequipos.com',
          prioridad: 'principal',
          zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
        },
        {
          nombre: 'SERGIO AARON CARDENAS GARCIA',
          whatsapp: '5543038476',
          email: 'ventas.sureste@motosyequipos.com',
          prioridad: 'alternativo',
          zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
        },
        {
          nombre: 'OCTAVIO NAVARRETE FERNANDEZ',
          whatsapp: '5562404656',
          email: 'ventas.mexico@motosyequipos.com',
          prioridad: 'alternativo',
          zonas: ['HIDALGO', 'QUERÉTARO', 'EDO. MEXICO']
        }
      ]
    },
    'michoacan': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER RENTERIA',
      whatsapp: '3311520857',
      email: 'ventas.jalisco@motosyequipos.com',
      zonas: ['JALISCO', 'COLIMA', 'MICHOACÁN']
    },
    'morelos': {
      tipo: 'simple',
      nombre: 'IVÁN HERNÁNDEZ LEAL',
      whatsapp: '3511779622',
      email: 'ventas.pacifico4@motosyequipos.com',
      zonas: ['GUERRERO', 'MORELOS', 'MICHOACÁN']
    },
    'nayarit': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER PEÑA',
      whatsapp: '6671207132',
      email: 'ventas.pacifico2@motosyequipos.com',
      zonas: ['ZACATECAS', 'AGUASCALIENTES', 'NAYARIT', 'JALISCO']
    },
    'nuevo-leon': {
      tipo: 'simple',
      nombre: 'JUAN CARLOS HERNANDEZ PACHECO',
      whatsapp: '8126229318',
      email: 'ventas.norte@motosyequipos.com',
      zonas: ['CHIHUAHUA', 'NUEVO LEON', 'COAHUILA', 'TAMAULIPAS']
    },
    'oaxaca': {
      tipo: 'simple',
      nombre: 'LIBER HOMERO CABALLERO VILLA',
      whatsapp: '5554336749',
      email: 'ventas.oaxaca@motosyequipos.com',
      zonas: ['OAXACA']
    },
    'puebla': {
      tipo: 'simple',
      nombre: 'ALEJANDRO ROBERTO PIÑA GARCIA',
      whatsapp: '5527378228',
      email: 'ventas.sur@motosyequipos.com',
      zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
    },
    'queretaro': {
      tipo: 'simple',
      nombre: 'OCTAVIO NAVARRETE FERNANDEZ',
      whatsapp: '5562404656',
      email: 'ventas.mexico@motosyequipos.com',
      zonas: ['HIDALGO', 'QUERÉTARO', 'EDO. MEXICO']
    },
    'quintana-roo': {
      tipo: 'simple',
      nombre: 'ULISES MARTIN VILLEGAS',
      whatsapp: '9993965148',
      email: 'ventas.peninsula@motosyequipos.com',
      zonas: ['YUCATÁN', 'CAMPECHE', 'QUINTANA ROO']
    },
    'san-luis-potosi': {
      tipo: 'simple',
      nombre: 'RICARDO REBOLLEDO ORTIZ',
      whatsapp: '4451042272',
      email: 'ventas.bajio@motosyequipos.com',
      zonas: ['GUANAJUATO', 'SAN LUIS POTOSÍ']
    },
    'sinaloa': {
      tipo: 'simple',
      nombre: 'CHRISTIAN PAUL DAVIZON VILLEGAS',
      whatsapp: '6691229912',
      email: 'ventas.pacifico3@motosyequipos.com',
      zonas: ['SINALOA', 'SONORA', 'BAJA CALIFORNIA SUR', 'NORTE Y DURANGO']
    },
    'sonora': {
      tipo: 'simple',
      nombre: 'CHRISTIAN PAUL DAVIZON VILLEGAS',
      whatsapp: '6691229912',
      email: 'ventas.pacifico3@motosyequipos.com',
      zonas: ['SINALOA', 'SONORA', 'BAJA CALIFORNIA SUR', 'NORTE Y DURANGO']
    },
    'tabasco': {
      tipo: 'simple',
      nombre: 'JORGE URTECHO REJON',
      whatsapp: '9991098579',
      email: 'ventas.golfosur@motosyequipos.com',
      zonas: ['CAMPECHE(NTE.)', 'TABASCO', 'VERACRUZ (SUR)']
    },
    'tamaulipas': {
      tipo: 'simple',
      nombre: 'JUAN CARLOS HERNANDEZ PACHECO',
      whatsapp: '8126229318',
      email: 'ventas.norte@motosyequipos.com',
      zonas: ['CHIHUAHUA', 'NUEVO LEON', 'COAHUILA', 'TAMAULIPAS']
    },
    'tlaxcala': {
      tipo: 'simple',
      nombre: 'ALEJANDRO ROBERTO PIÑA GARCIA',
      whatsapp: '5527378228',
      email: 'ventas.sur@motosyequipos.com',
      zonas: ['CDMX', 'EDO. MEXICO', 'PUEBLA', 'TLAXCALA']
    },
    'veracruz': {
      tipo: 'multiple',
      asesores: [
        {
          nombre: 'MIGUEL ANGEL GZZ VIDAL',
          whatsapp: '2321033094',
          email: 'ventas.veracruz@motosyequipos.com',
          prioridad: 'principal',
          zonas: ['VERACRUZ']
        },
        {
          nombre: 'JORGE URTECHO REJON',
          whatsapp: '9991098579',
          email: 'ventas.golfosur@motosyequipos.com',
          prioridad: 'alternativo',
          zonas: ['CAMPECHE(NTE.)', 'TABASCO', 'VERACRUZ (SUR)']
        }
      ]
    },
    'yucatan': {
      tipo: 'simple',
      nombre: 'ULISES MARTIN VILLEGAS',
      whatsapp: '9993965148',
      email: 'ventas.peninsula@motosyequipos.com',
      zonas: ['YUCATÁN', 'CAMPECHE', 'QUINTANA ROO']
    },
    'zacatecas': {
      tipo: 'simple',
      nombre: 'FRANCISCO JAVIER PEÑA',
      whatsapp: '6671207132',
      email: 'ventas.pacifico2@motosyequipos.com',
      zonas: ['ZACATECAS', 'AGUASCALIENTES', 'NAYARIT', 'JALISCO']
    }
  };

  // 🆕 NUEVO: Promotor por defecto para casos no encontrados
  const PROMOTOR_DEFAULT = {
    nombre: 'COORDINADOR GENERAL',
    whatsapp: '5555555555', // ⚠️ CAMBIAR por número real de coordinación
    email: 'coordinacion@motosyequipos.com', // ⚠️ CAMBIAR por email real
    esDefault: true
  };

  // 🆕 NUEVO: Función para cargar municipios desde el archivo JSON
  let estadosMunicipiosData = null;

  async function cargarEstadosMunicipios() {
    try {
      const response = await fetch('/estados-municipios.json');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      estadosMunicipiosData = await response.json();
      return estadosMunicipiosData;
    } catch (error) {
      console.error('Error cargando estados-municipios.json:', error);
      return null;
    }
  }

  // 🆕 NUEVO: Función para mapear nombres de estados con claves del JSON
  function obtenerClaveEstado(estadoValue) {
    const mapeoEstados = {
      'aguascalientes': 'Aguascalientes',
      'baja-california': 'Baja California',
      'baja-california-sur': 'Baja California Sur',
      'campeche': 'Campeche',
      'chiapas': 'Chiapas',
      'chihuahua': 'Chihuahua',
      'ciudad-de-mexico': 'Ciudad de Mexico',
      'coahuila': 'Coahuila',
      'colima': 'Colima',
      'durango': 'Durango',
      'guanajuato': 'Guanajuato',
      'guerrero': 'Guerrero',
      'hidalgo': 'Hidalgo',
      'jalisco': 'Jalisco',
      'mexico': 'Estado de Mexico',
      'michoacan': 'Michoacan',
      'morelos': 'Morelos',
      'nayarit': 'Nayarit',
      'nuevo-leon': 'Nuevo Leon',
      'oaxaca': 'Oaxaca',
      'puebla': 'Puebla',
      'queretaro': 'Queretaro',
      'quintana-roo': 'Quintana Roo',
      'san-luis-potosi': 'San Luis Potosi',
      'sinaloa': 'Sinaloa',
      'sonora': 'Sonora',
      'tabasco': 'Tabasco',
      'tamaulipas': 'Tamaulipas',
      'tlaxcala': 'Tlaxcala',
      'veracruz': 'Veracruz',
      'yucatan': 'Yucatan',
      'zacatecas': 'Zacatecas'
    };
    
    return mapeoEstados[estadoValue] || null;
  }

  // 🆕 NUEVO: Función para poblar el select de municipios
  function poblarMunicipios(estadoSeleccionado) {
    const municipioSelect = document.getElementById('municipio');
    const municipioContainer = document.getElementById('municipio-container');
    
    if (!municipioSelect || !municipioContainer) return;

    // Limpiar opciones previas
    municipioSelect.innerHTML = '<option value="" disabled selected class="text-gray-400 italic">Selecciona tu municipio</option>';
    
    if (!estadoSeleccionado || !estadosMunicipiosData) {
      municipioContainer.classList.add('hidden');
      municipioSelect.removeAttribute('required');
      return;
    }

    const claveEstado = obtenerClaveEstado(estadoSeleccionado);
    const municipios = estadosMunicipiosData[claveEstado];
    
    if (municipios && Array.isArray(municipios)) {
      // Mostrar el campo de municipios
      municipioContainer.classList.remove('hidden');
      municipioSelect.setAttribute('required', 'true');
      
      // Agregar municipios ordenados alfabéticamente
      municipios.sort().forEach(municipio => {
        const option = document.createElement('option');
        option.value = municipio;
        option.textContent = municipio;
        option.className = 'text-gray-900 font-medium';
        municipioSelect.appendChild(option);
      });
    } else {
      municipioContainer.classList.add('hidden');
      municipioSelect.removeAttribute('required');
    }
  }

  // Script principal continúa...
  document.addEventListener('DOMContentLoaded', async function() {
    // Cargar datos de estados-municipios al iniciar
    await cargarEstadosMunicipios();
    // 1. Declaraciones de elementos
    const form = document.getElementById('distributor-form');
    const toastNotification = document.getElementById('toast-notification');
    const closeToastButton = document.getElementById('close-toast');
    const confettiCanvas = document.getElementById('confetti-canvas');
    const submitButton = document.getElementById('submit-button');
    const buttonText = document.getElementById('button-text');
    const buttonSpinner = document.getElementById('button-spinner');
    const submitStatus = document.getElementById('submit-status');
    
    // 2. Verificación de elementos
    if (!form || !toastNotification || !confettiCanvas || !submitButton) {
      console.error("Algunos elementos no se encontraron");
      return;
    }
    
    // 3. Variables globales del componente
    let toastTimer;
    const isMobile = window.innerWidth < 768;
    
    // 4. Funciones auxiliares mejoradas
    function showError(fieldId, show) {
      const errorElement = document.getElementById(`error-${fieldId}`);
      const fieldElement = document.getElementById(fieldId);
      
      if (errorElement && fieldElement) {
        if (show) {
          errorElement.classList.remove('hidden');
          fieldElement.classList.add('ring-2', 'ring-red-500', 'field-invalid');
          fieldElement.classList.remove('ring-kenda-orange', 'field-valid');
          fieldElement.setAttribute('aria-invalid', 'true');
        } else {
          errorElement.classList.add('hidden');
          fieldElement.classList.remove('ring-2', 'ring-red-500', 'field-invalid');
          fieldElement.setAttribute('aria-invalid', 'false');
        }
      }
    }
    
    function showSuccess(fieldId) {
      const fieldElement = document.getElementById(fieldId);
      if (fieldElement) {
        fieldElement.classList.add('field-valid');
        fieldElement.classList.remove('field-invalid', 'ring-red-500');
        fieldElement.setAttribute('aria-invalid', 'false');
      }
    }
    
    // 🆕 NUEVA: Función para formatear teléfono mexicano
    function formatPhoneNumber(value) {
      // Remover todo excepto números
      const cleaned = value.replace(/\D/g, '');
      
      // Limitar a 10 dígitos
      const match = cleaned.match(/^(\d{0,2})(\d{0,4})(\d{0,4})$/);
      
      if (match) {
        let formatted = '';
        if (match[1]) formatted += match[1];
        if (match[2]) formatted += (match[1] ? ' ' : '') + match[2];
        if (match[3]) formatted += (match[2] ? ' ' : '') + match[3];
        return formatted;
      }
      
      return value;
    }
    
    // 🆕 NUEVA: Auto-save functionality
    let autoSaveTimeout;
    const autoSaveDelay = 2000; // 2 segundos
    
    function showAutoSaveIndicator(status = 'saving') {
      const indicator = document.getElementById('auto-save-indicator');
      const spinner = document.getElementById('save-spinner');
      const check = document.getElementById('save-check');
      const text = document.getElementById('save-text');
      
      if (!indicator) return;
      
      indicator.classList.remove('error');
      
      if (status === 'saving') {
        spinner.classList.remove('hidden');
        check.classList.add('hidden');
        text.textContent = 'Guardando...';
        indicator.classList.add('show');
      } else if (status === 'saved') {
        spinner.classList.add('hidden');
        check.classList.remove('hidden');
        text.textContent = 'Datos guardados';
        indicator.classList.add('show');
        
        // Ocultar después de 2 segundos
        setTimeout(() => {
          indicator.classList.remove('show');
        }, 2000);
      } else if (status === 'error') {
        spinner.classList.add('hidden');
        check.classList.add('hidden');
        text.textContent = 'Error al guardar';
        indicator.classList.add('error', 'show');
        
        // Ocultar después de 3 segundos
        setTimeout(() => {
          indicator.classList.remove('show', 'error');
        }, 3000);
      }
    }
    
    function autoSaveFormData() {
      try {
        const formData = new FormData(form);
        const formObject = {};
        
        formData.forEach((value, key) => {
          if (value.trim() !== '') {
            formObject[key] = value;
          }
        });
        
        // Solo guardar si hay al menos un campo lleno
        if (Object.keys(formObject).length > 0) {
          localStorage.setItem('kenda-form-draft', JSON.stringify({
            data: formObject,
            timestamp: new Date().toISOString()
          }));
          showAutoSaveIndicator('saved');
        }
      } catch (error) {
        console.error('Error en auto-save:', error);
        showAutoSaveIndicator('error');
      }
    }
    
    function triggerAutoSave() {
      showAutoSaveIndicator('saving');
      clearTimeout(autoSaveTimeout);
      autoSaveTimeout = setTimeout(() => {
        autoSaveFormData();
      }, autoSaveDelay);
    }
    
    // 🆕 NUEVA: Restaurar datos guardados
    function restoreFormData() {
      try {
        const saved = localStorage.getItem('kenda-form-draft');
        if (saved) {
          const { data, timestamp } = JSON.parse(saved);
          const saveDate = new Date(timestamp);
          const now = new Date();
          const hoursDiff = (now - saveDate) / (1000 * 60 * 60);
          
          // Solo restaurar si es menor a 24 horas
          if (hoursDiff < 24) {
            Object.keys(data).forEach(key => {
              const field = document.getElementById(key);
              if (field && field.value === '') {
                field.value = data[key];
                
                // Si se restaura el estado, cargar municipios correspondientes
                if (key === 'estado' && data[key]) {
                  poblarMunicipios(data[key]);
                }
              }
            });
            // Datos restaurados desde auto-save
          } else {
            // Limpiar datos antiguos
            localStorage.removeItem('kenda-form-draft');
          }
        }
      } catch (error) {
        console.error('Error restaurando datos:', error);
        localStorage.removeItem('kenda-form-draft');
      }
    }
    
    // Función para resolver promotor basado en estado seleccionado
    function resolverPromotor(estadoSeleccionado) {
      // Buscar datos del estado
      let estadoData = PROMOTORES_POR_ESTADO[estadoSeleccionado];
      
      if (estadoData) {
        if (estadoData.tipo === 'multiple') {
          // Estado con múltiples asesores
          return {
            tipo: 'multiple',
            asesores: estadoData.asesores,
            esDefault: false
          };
        } else {
          // Estado con un solo asesor
          return {
            tipo: 'simple',
            nombre: estadoData.nombre,
            whatsapp: estadoData.whatsapp,
            email: estadoData.email,
            zonas: estadoData.zonas,
            esDefault: false
          };
        }
      }
      
      // Si no se encuentra, usar promotor por defecto
      return {
        ...PROMOTOR_DEFAULT,
        tipo: 'simple'
      };
    }
    
    // Función para validar datos del promotor
    function validarDatosPromotor(promotorData) {
      const errores = [];
      
      if (promotorData.tipo === 'multiple') {
        // Validar múltiples asesores
        if (!promotorData.asesores || !Array.isArray(promotorData.asesores) || promotorData.asesores.length === 0) {
          return false;
        }
        
        promotorData.asesores.forEach((asesor, index) => {
          if (!asesor.whatsapp || asesor.whatsapp.toString().length < 10) {
            errores.push(`WhatsApp asesor ${index + 1} inválido`);
          }
          
          if (!asesor.email || !asesor.email.includes('@')) {
            errores.push(`Email asesor ${index + 1} inválido`);
          }
          
          if (!asesor.nombre || asesor.nombre.trim().length === 0) {
            errores.push(`Nombre asesor ${index + 1} inválido`);
          }
        });
      } else {
        // Validar asesor único
        if (!promotorData.whatsapp || promotorData.whatsapp.toString().length < 10) {
          errores.push('WhatsApp promotor inválido');
        }
        
        if (!promotorData.email || !promotorData.email.includes('@')) {
          errores.push('Email promotor inválido');
        }
        
        if (!promotorData.nombre || promotorData.nombre.trim().length === 0) {
          errores.push('Nombre promotor inválido');
        }
      }
      
      return errores.length === 0;
    }

    // Función para mostrar información del promotor al usuario
    function mostrarInfoPromotor(promotorData) {
      const infoElement = document.getElementById('promotor-info');
      
      if (!infoElement) {
        return;
      }
      
      if (!promotorData.esDefault) {
        if (promotorData.tipo === 'multiple') {
          // Mostrar múltiples asesores
          const asesoresHtml = promotorData.asesores.map(asesor => 
            `<p class="text-sm text-gray-700 font-medium">• ${asesor.nombre}</p>`
          ).join('');
          
          infoElement.innerHTML = `
            <div class="bg-kenda-orange bg-opacity-10 border border-kenda-orange rounded-xl p-4 transition-all duration-300">
              <div class="flex items-start">
                <div class="flex-shrink-0 w-10 h-10 bg-kenda-orange bg-opacity-20 rounded-lg flex items-center justify-center mr-3">
                  <svg class="w-5 h-5 text-kenda-orange" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <h4 class="text-sm font-semibold text-gray-900 mb-1">Tus asesores de zona asignados</h4>
                  ${asesoresHtml}
                  <p class="text-xs text-gray-600 mt-1">Alguno de los asesores se pondrá en contacto contigo después de enviar el formulario</p>
                </div>
              </div>
            </div>
          `;
          
          // 🎯 META PIXEL: Tracking de asignación de promotor múltiple
          if (typeof window.trackFormEvent === 'function') {
            window.trackFormEvent('ViewContent', {
              content_name: 'Promoter Assignment',
              content_category: 'Sales Process',
              content_type: 'multiple',
              value: promotorData.asesores.length,
              currency: 'MXN'
            });
          }
        } else {
          // Mostrar asesor único
          infoElement.innerHTML = `
            <div class="bg-kenda-orange bg-opacity-10 border border-kenda-orange rounded-xl p-4 transition-all duration-300">
              <div class="flex items-start">
                <div class="flex-shrink-0 w-10 h-10 bg-kenda-orange bg-opacity-20 rounded-lg flex items-center justify-center mr-3">
                  <svg class="w-5 h-5 text-kenda-orange" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <h4 class="text-sm font-semibold text-gray-900 mb-1">Tu asesor de zona asignado</h4>
                  <p class="text-sm text-gray-700 font-medium">${promotorData.nombre}</p>
                  <p class="text-xs text-gray-600 mt-1">Se pondrá en contacto contigo después de enviar el formulario</p>
                </div>
              </div>
            </div>
          `;
          
          // 🎯 META PIXEL: Tracking de asignación de promotor simple
          if (typeof window.trackFormEvent === 'function') {
            window.trackFormEvent('ViewContent', {
              content_name: 'Promoter Assignment',
              content_category: 'Sales Process',
              content_type: 'simple',
              value: 1,
              currency: 'MXN'
            });
          }
        }
        
        infoElement.classList.remove('hidden');
      } else {
        infoElement.classList.add('hidden');
      }
    }

    function validateField(field) {
      const fieldId = field.id;
      
      // Ocultar mensaje de error al iniciar validación
      showError(fieldId, false);
      
      // Validación especial para teléfono (formato mexicano mejorado)
      if (fieldId === 'telefono') {
        const value = field.value.replace(/\D/g, ''); // Quitar todo excepto números
        if (value.length < 10 || value.length > 15) {
          showError(fieldId, true);
          return false;
        }
        showSuccess(fieldId);
        return true;
      }
      
      // Para todos los demás campos, usar validación HTML5 básica
      const isValid = field.checkValidity();
      
      if (!isValid) {
        showError(fieldId, true);
        return false;
      }
      
      showSuccess(fieldId);
      return true;
    }
    // 5. Función para mostrar el toast mejorada con iconos SVG
    function showToast(type = 'success', message = 'Formulario enviado correctamente.', title = 'Éxito') {
      // Limpiar cualquier temporizador anterior
      if (toastTimer) {
        clearTimeout(toastTimer);
      }
      
      // Elementos del toast
      const toastEl = toastNotification;
      const toastContainer = toastEl.querySelector('div');
      const titleEl = document.getElementById('toast-title');
      const messageEl = document.getElementById('toast-message');
      const successIcon = document.getElementById('toast-success-icon');
      const errorIcon = document.getElementById('toast-error-icon');
      const progressBar = document.getElementById('toast-progress');
      
      // Configurar estilos y contenido según el tipo
      if (type === 'error') {
        titleEl.textContent = title || 'Error';
        toastContainer.classList.remove('toast-success');
        toastContainer.classList.add('toast-error');
        
        // Mostrar ícono de error
        if (successIcon) successIcon.classList.add('opacity-0');
        if (errorIcon) errorIcon.classList.remove('opacity-0');
        
        // Barra de progreso roja
        if (progressBar) {
          progressBar.classList.remove('success');
          progressBar.classList.add('error');
        }
      } else {
        titleEl.textContent = title || '¡Éxito!';
        toastContainer.classList.remove('toast-error');
        toastContainer.classList.add('toast-success');
        
        // Mostrar ícono de éxito
        if (errorIcon) errorIcon.classList.add('opacity-0');
        if (successIcon) successIcon.classList.remove('opacity-0');
        
        // Barra de progreso verde
        if (progressBar) {
          progressBar.classList.remove('error');
          progressBar.classList.add('success');
        }
      }
      
      messageEl.textContent = message;
      
      // Mostrar el toast
      toastNotification.classList.remove('hidden');
      
      // Inicializar barra de progreso al 100% y animar hacia 0%
      if (progressBar) {
        progressBar.style.width = '100%';
        
        // Pequeño delay para que se vea inicialmente al 100%
        setTimeout(() => {
          progressBar.style.transitionDuration = '5000ms';
          progressBar.style.width = '0%';
        }, 100);
      }
      
      // Auto-hide después de 5 segundos (más rápido y limpio)
      toastTimer = setTimeout(function() {
        toastNotification.classList.add('hidden');
        
        // Reset para próxima vez
        if (progressBar) {
          progressBar.style.transitionDuration = '75ms';
          progressBar.style.width = '100%';
        }
      }, 5000);
    }
        
    // 6. Animación de confeti mejorada
    const confettiAnimation = {
      canvas: confettiCanvas,
      ctx: null,
      particles: [],
      running: false,
      colors: [
        '#FF5722', '#FFC107', '#2196F3', 
        '#4CAF50', '#9C27B0', '#E91E63',
        '#FFEB3B', '#03A9F4', '#8BC34A'
      ],
      shapes: ['circle', 'square', 'triangle', 'line', 'star'],
      
      init: function() {
        this.ctx = this.canvas.getContext('2d');
        this.resize();
        window.addEventListener('resize', () => this.resize());
      },
      
      resize: function() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      },
      
      createParticle: function(x, y) {
        const sizeMultiplier = isMobile ? 0.7 : 1;
        const shape = this.shapes[Math.floor(Math.random() * this.shapes.length)];
        return {
          x: x || Math.random() * this.canvas.width,
          y: y || Math.random() * this.canvas.height * 0.5,
          size: (Math.random() * 10 + 5) * sizeMultiplier,
          color: this.colors[Math.floor(Math.random() * this.colors.length)],
          opacity: 1,
          shape: shape,
          velocity: {
            x: Math.random() * 6 - 3,
            y: Math.random() * -7 - 3
          },
          rotation: Math.random() * 360,
          rotationSpeed: Math.random() * 10 - 5,
          gravity: 0.1 + Math.random() * 0.1,
          friction: 0.95 + Math.random() * 0.04,
          wobble: Math.random() * 0.2,
          wobbleSpeed: Math.random() * 0.1,
          bounceLimit: Math.floor(Math.random() * 3) + 2,
          bounceCount: 0
        };
      },
      
      drawParticle: function(p) {
        this.ctx.save();
        this.ctx.translate(p.x, p.y);
        this.ctx.rotate(p.rotation * Math.PI / 180);
        this.ctx.globalAlpha = p.opacity;
        this.ctx.fillStyle = p.color;
        
        switch(p.shape) {
          case 'circle':
            this.ctx.beginPath();
            this.ctx.arc(0, 0, p.size / 2, 0, Math.PI * 2);
            this.ctx.fill();
            break;
            
          case 'square':
            this.ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);
            break;
            
          case 'triangle':
            this.ctx.beginPath();
            this.ctx.moveTo(0, -p.size / 2);
            this.ctx.lineTo(-p.size / 2, p.size / 2);
            this.ctx.lineTo(p.size / 2, p.size / 2);
            this.ctx.closePath();
            this.ctx.fill();
            break;
            
          case 'line':
            this.ctx.strokeStyle = p.color;
            this.ctx.lineWidth = p.size / 5;
            this.ctx.beginPath();
            this.ctx.moveTo(-p.size, 0);
            this.ctx.lineTo(p.size, 0);
            this.ctx.stroke();
            break;
            
          case 'star':
            this.ctx.beginPath();
            const spikes = 5;
            const outerRadius = p.size / 2;
            const innerRadius = p.size / 4;
            
            for (let i = 0; i < spikes * 2; i++) {
              const radius = i % 2 === 0 ? outerRadius : innerRadius;
              const angle = (i / (spikes * 2)) * Math.PI * 2;
              const x = Math.cos(angle) * radius;
              const y = Math.sin(angle) * radius;
              
              if (i === 0) {
                this.ctx.moveTo(x, y);
              } else {
                this.ctx.lineTo(x, y);
              }
            }
            
            this.ctx.closePath();
            this.ctx.fill();
            break;
        }
        
        this.ctx.restore();
      },
      
      updateParticle: function(p) {
        p.x += Math.sin(Date.now() * p.wobbleSpeed) * p.wobble;
        p.velocity.y += p.gravity;
        p.velocity.x *= p.friction;
        p.velocity.y *= p.friction;
        p.x += p.velocity.x;
        p.y += p.velocity.y;
        p.rotation += p.rotationSpeed;
        p.opacity -= 0.005;
        
        if (p.y >= this.canvas.height - p.size && p.bounceCount < p.bounceLimit) {
          p.velocity.y *= -0.6;
          p.y = this.canvas.height - p.size;
          p.bounceCount++;
          p.size *= 0.9;
        }
        
        if (p.x <= p.size || p.x >= this.canvas.width - p.size) {
          p.velocity.x *= -0.5;
          if (p.x <= p.size) p.x = p.size;
          if (p.x >= this.canvas.width - p.size) p.x = this.canvas.width - p.size;
        }
        
        return p.opacity > 0.05 && p.size > 1;
      },
      
      animate: function() {
        if (!this.running) return;
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        for (let i = 0; i < this.particles.length; i++) {
          const p = this.particles[i];
          if (this.updateParticle(p)) {
            this.drawParticle(p);
          } else {
            this.particles.splice(i, 1);
            i--;
          }
        }
        
        if (this.particles.length === 0) {
          this.running = false;
          this.canvas.classList.add('hidden');
          return;
        }
        
        requestAnimationFrame(() => this.animate());
      },
      
      start: function() {
        this.canvas.classList.remove('hidden');
        this.resize();
        this.particles = [];
        this.running = true;
        
        const numPoints = isMobile ? 3 : 5;
        const particlesPerPoint = isMobile ? 20 : 30;
        const pointSpacing = this.canvas.width / numPoints;
        
        for (let j = 0; j < numPoints; j++) {
          const originX = pointSpacing * j + (pointSpacing / 2) + (Math.random() * 100 - 50);
          const originY = -20 + (Math.random() * 40);
          
          for (let i = 0; i < particlesPerPoint; i++) {
            this.particles.push(this.createParticle(originX, originY));
          }
        }
        
        this.animate();
      }
    };
    
    // 7. Control del botón simplificado
    function controlPulseAnimation() {
      const submitBtn = document.getElementById('submit-button');
      
      // El botón siempre mantiene su animación pulse-effect
      // No necesita lógica adicional ya que se maneja por CSS
      if (submitBtn && !submitBtn.classList.contains('pulse-effect')) {
        submitBtn.classList.add('pulse-effect');
      }
    }
        
    // 8. Event listeners para campos del formulario mejorados
    const formFields = form.querySelectorAll('input, select');
    formFields.forEach(field => {
      field.addEventListener('blur', function() {
        validateField(this);
      });
      
      field.addEventListener('input', function() {
        // Smart formatting para teléfono
        if (this.id === 'telefono') {
          const cursorPosition = this.selectionStart;
          const oldValue = this.value;
          const formatted = formatPhoneNumber(this.value);
          
          if (formatted !== oldValue) {
            this.value = formatted;
            
            // Mantener posición del cursor
            const newCursorPosition = cursorPosition + (formatted.length - oldValue.length);
            this.setSelectionRange(newCursorPosition, newCursorPosition);
          }
        }
        
        showError(this.id, false);
        
        // Quitar estado de validación al modificar
        this.classList.remove('field-valid', 'field-invalid');
        
        // Auto-save en cada cambio
        triggerAutoSave();
      });
      
      if (field.tagName === 'SELECT') {
        field.addEventListener('change', function() {
          validateField(this);
        });
      }
    });
    
    // 🆕 NUEVO: Event listener específico para el campo estado
    const estadoField = document.getElementById('estado');
    if (estadoField) {
      estadoField.addEventListener('change', function() {
        const estadoSeleccionado = this.value;
        
        if (estadoSeleccionado) {
          const promotorData = resolverPromotor(estadoSeleccionado);
          mostrarInfoPromotor(promotorData);
          
          // 🆕 NUEVO: Cargar municipios del estado seleccionado
          poblarMunicipios(estadoSeleccionado);
          
          // 🎯 META PIXEL: Tracking de selección de ubicación
          if (typeof window.trackFormEvent === 'function') {
            window.trackFormEvent('InitiateCheckout', {
              content_name: 'Location Selection',
              content_category: 'Form Progress',
              custom_parameter_1: estadoSeleccionado
            });
          }
        } else {
          // Ocultar info si no hay estado seleccionado
          const infoElement = document.getElementById('promotor-info');
          if (infoElement) {
            infoElement.classList.add('hidden');
          }
          
          // 🆕 NUEVO: Ocultar campo de municipios
          poblarMunicipios(null);
        }
      });
    }
    
    // 🎯 META PIXEL: Event listener para selección de municipio
    const municipioField = document.getElementById('municipio');
    if (municipioField) {
      municipioField.addEventListener('change', function() {
        const municipioSeleccionado = this.value;
        const estadoSeleccionado = document.getElementById('estado')?.value;
        
        if (municipioSeleccionado && estadoSeleccionado) {
          // 🎯 META PIXEL: Tracking de ubicación completa
          if (typeof window.trackFormEvent === 'function') {
            window.trackFormEvent('AddToCart', {
              content_name: 'Complete Location Selection',
              content_category: 'Form Progress',
              value: 1,
              currency: 'MXN',
              custom_parameter_1: estadoSeleccionado,
              custom_parameter_2: municipioSeleccionado
            });
          }
        }
      });
    }
    
    // 9. Event listeners principales
    
    // 🔄 MODIFICADO: Manejar el envío del formulario con datos enriquecidos
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Limpiar mensajes previos
      submitStatus.textContent = '';
      const errorMessages = document.querySelectorAll('.error-message');
      errorMessages.forEach(msg => {
        msg.classList.add('hidden');
      });
      
      // Validar todos los campos (lógica existente)
      let isValid = true;
      formFields.forEach(field => {
        if (!validateField(field)) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        showToast('error', 'Por favor complete todos los campos correctamente.', 'Error');
        submitStatus.textContent = 'Error: Formulario incompleto';
        return;
      }
      
      // Estado de carga
      submitButton.disabled = true;
      buttonText.textContent = 'Enviando...';
      buttonSpinner.classList.remove('hidden');
      submitStatus.textContent = 'Enviando formulario...';
      
      try {
        const formData = new FormData(form);
        const formObject = {};
        
        formData.forEach(function(value, key) {
          formObject[key] = value;
        });
        
        // Resolver promotor basado en estado
        const estadoSeleccionado = formObject.estado;
        const promotorData = resolverPromotor(estadoSeleccionado);
        
        // Validar datos del promotor
        if (!validarDatosPromotor(promotorData)) {
          promotorData = {
            ...PROMOTOR_DEFAULT,
            tipo: 'simple'
          };
        }
        
        // Formatear fecha/hora en formato DD/MM/YYYY HH:MM
        const ahora = new Date();
        const fechaFormateada = `${String(ahora.getDate()).padStart(2, '0')}/${String(ahora.getMonth() + 1).padStart(2, '0')}/${ahora.getFullYear()} ${String(ahora.getHours()).padStart(2, '0')}:${String(ahora.getMinutes()).padStart(2, '0')}`;
        
        // Estructura optimizada sin duplicaciones
        const datosEnriquecidos = {
          // Datos estructurados del cliente
          cliente: {
            nombre: formObject.nombre,
            email: formObject.email,
            telefono: formObject.telefono,
            ubicacion: {
              estado: formObject.estado,
              municipio: formObject.municipio || null
            },
            negocio: {
              giroComercial: formObject.giroComercial,
              capitalInversion: formObject.tipoNegocio,
              inicioOperaciones: formObject.inicioOperaciones || formObject.iniciarOperaciones
            }
          },
          
          // Datos del promotor asignado
          promotor: promotorData.tipo === 'multiple' 
            ? {
                tipo: 'multiple',
                principal: promotorData.asesores.find(a => a.prioridad === 'principal'),
                alternativos: promotorData.asesores.filter(a => a.prioridad === 'alternativo'),
                cantidadAsesores: promotorData.asesores.length,
                esDefault: false
              }
            : {
                tipo: 'simple',
                nombre: promotorData.nombre,
                whatsapp: promotorData.whatsapp,
                email: promotorData.email,
                zonas: promotorData.zonas || [],
                esDefault: promotorData.esDefault || false
              },
          
          // Metadatos del envío
          envio: {
            timestamp: ahora.toISOString(),
            fechaLegible: fechaFormateada,
            source: 'website-form-v3',
            version: 'v3.1',
            userAgent: navigator.userAgent,
            url: window.location.href
          }
        };
        
        // 📋 Log del JSON completo para debugging
        console.log('📋 JSON del formulario:', JSON.stringify(datosEnriquecidos, null, 2));
        
        // Envío al webhook
        const MAKE_WEBHOOK_URL = 'https://hook.us2.make.com/3mknzgigjscwegtansipvrz0163zko73';
        
        const response = await fetch(MAKE_WEBHOOK_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          body: JSON.stringify(datosEnriquecidos)
        });
        
        // Manejo de respuesta
        console.log('📤 Respuesta del webhook:', {
          status: response.status,
          statusText: response.statusText
        });
        
        if (response.status >= 200 && response.status < 300) {
          // Respuesta exitosa
          let responseData = {};
          
          try {
            const textResponse = await response.text();
            if (textResponse) {
              responseData = JSON.parse(textResponse);
            }
          } catch (parseError) {
            responseData = { status: 'success' };
          }
          
          // Mensaje de éxito personalizado
          let mensajeExito, tituloExito;
          
          if (promotorData.esDefault) {
            mensajeExito = 'Tu solicitud fue enviada exitosamente. Nuestro equipo se pondrá en contacto contigo pronto.';
          } else if (promotorData.tipo === 'multiple') {
            mensajeExito = `Tu solicitud fue enviada exitosamente. ${promotorData.asesores.map(a => a.nombre).join(' y ')} se pondrán en contacto contigo pronto.`;
          } else {
            mensajeExito = `Tu solicitud fue enviada exitosamente. ${promotorData.nombre} se pondrá en contacto contigo pronto.`;
          }
          
          tituloExito = '¡Gracias por tu interés en ser distribuidor KENDA!';
          
          showToast('success', mensajeExito, tituloExito);
          confettiAnimation.start();
          submitStatus.textContent = 'Formulario enviado exitosamente';
          
          // 🎯 META PIXEL: Tracking de conversión exitosa (Lead)
          if (typeof window.trackFormEvent === 'function') {
            const estadoValue = formObject.estado || '';
            const capitalInversion = formObject.tipoNegocio || '';
            
            // Asignar valor monetario basado en capital de inversión
            let leadValue = 1;
            switch(capitalInversion) {
              case '50k-100k': leadValue = 75; break;
              case '100k-250k': leadValue = 175; break;
              case '250k-500k': leadValue = 375; break;
              case 'mas-500k': leadValue = 750; break;
              default: leadValue = 1;
            }
            
            window.trackFormEvent('Lead', {
              content_name: 'Distributor Application',
              content_category: 'Business Lead',
              value: leadValue,
              currency: 'MXN',
              status: 'completed',
              predicted_ltv: leadValue * 10, // Valor estimado a largo plazo
              content_type: promotorData.tipo,
              custom_parameter_1: estadoValue,
              custom_parameter_2: formObject.municipio || '',
              custom_parameter_3: capitalInversion,
              custom_parameter_4: formObject.giroComercial || ''
            });
            
            // 🎯 META PIXEL: Evento adicional de Purchase (conversión de alta calidad)
            window.trackFormEvent('Purchase', {
              content_name: 'Distributor Partnership',
              content_category: 'Business Partnership',
              value: leadValue,
              currency: 'MXN',
              content_type: 'distributor_application',
              num_items: 1
            });
          }
          
          // Resetear formulario
          form.reset();
          
          // Limpiar auto-save
          localStorage.removeItem('kenda-form-draft');
          
          // Limpiar estados visuales
          formFields.forEach(field => {
            field.classList.remove('field-valid', 'field-invalid');
            field.setAttribute('aria-invalid', 'false');
          });
          
          // Ocultar información del promotor
          const infoElement = document.getElementById('promotor-info');
          if (infoElement) {
            infoElement.classList.add('hidden');
          }
          
          // Ocultar campo de municipios
          const municipioContainer = document.getElementById('municipio-container');
          if (municipioContainer) {
            municipioContainer.classList.add('hidden');
          }
          
          setTimeout(() => {
            controlPulseAnimation();
          }, 100);
          
        } else {
          // Error del servidor
          const errorText = await response.text();
          throw new Error(`Error HTTP ${response.status}: ${errorText}`);
        }
        
      } catch (error) {
        console.log('Form submission error occurred:', error);
        console.log('Error type:', error.constructor.name);
        console.log('Error message:', error.message);
        console.log('Error stack:', error.stack);
        showToast('error', 'Hubo un error al enviar el formulario. Por favor, intente nuevamente.', 'Error');
        submitStatus.textContent = 'Error al enviar el formulario';
      } finally {
        // Restaurar estado del botón
        submitButton.disabled = false;
        buttonText.textContent = 'Enviar formulario';
        buttonSpinner.classList.add('hidden');
      }
    });

    // 🎯 META PIXEL: Tracking de inicio de interacción con formulario
    let hasTrackedFormStart = false;
    formFields.forEach(field => {
      field.addEventListener('focus', function() {
        if (!hasTrackedFormStart) {
          hasTrackedFormStart = true;
          if (typeof window.trackFormEvent === 'function') {
            window.trackFormEvent('InitiateCheckout', {
              content_name: 'Form Interaction Start',
              content_category: 'Form Engagement',
              value: 1,
              currency: 'MXN'
            });
          }
        }
      }, { once: true });
    });
    
    // 🎯 META PIXEL: Tracking de progreso del formulario (cuando se completa información básica)
    function trackFormProgress() {
      const nombre = document.getElementById('nombre')?.value || '';
      const email = document.getElementById('email')?.value || '';
      const telefono = document.getElementById('telefono')?.value || '';
      
      if (nombre && email && telefono) {
        if (typeof window.trackFormEvent === 'function') {
          window.trackFormEvent('AddPaymentInfo', {
            content_name: 'Basic Info Completed',
            content_category: 'Form Progress',
            value: 2,
            currency: 'MXN'
          });
        }
      }
    }
    
    // Agregar listeners para tracking de progreso
    ['nombre', 'email', 'telefono'].forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        field.addEventListener('blur', trackFormProgress);
      }
    });

    // Event listener para cerrar toast
    closeToastButton.addEventListener('click', function() {
      if (toastTimer) {
        clearTimeout(toastTimer);
      }
      toastNotification.classList.add('hidden');
    });

    // Inicializaciones finales
    confettiAnimation.init();
    controlPulseAnimation();
    restoreFormData();
    
    // 🎯 META PIXEL: Tracking de vista de formulario (después de carga)
    setTimeout(() => {
      if (typeof window.trackFormEvent === 'function') {
        window.trackFormEvent('ViewContent', {
          content_name: 'Distributor Form',
          content_category: 'Form View',
          content_type: 'application_form',
          value: 1,
          currency: 'MXN'
        });
      }
    }, 2000);
  });
</script>