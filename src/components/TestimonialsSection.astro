---
// Interfaz para los testimoniales
interface Testimonial {
  id: number;
  name: string;
  location: string;
  content: string;
  image: string;
}

// Datos de testimoniales
const testimonials: Testimonial[] = [
  {
    id: 1,
    name: "Carlos Rivas",
    location: "Distribuidor Motozone CDMX",
    content: "Llevamos más de 6 años trabajando con Motos y Equipos, y la diferencia se nota. El surtido de marcas es impresionante y siempre están a la vanguardia con lo último en protección y refacciones. Para nosotros, contar con un proveedor confiable y puntual es clave, y ellos no fallan. Nuestro catálogo creció y nuestros clientes lo notan.",
    image: "/images/testimonials/carlos.webp"
  },
  {
    id: 2,
    name: "Lucía Méndez",
    location: "Distribuidora Garage 76 Custom",
    content: "Lo que más valoramos de Motos y Equipos es su conocimiento técnico. No solo venden, te asesoran sobre compatibilidad, materiales y stock real. Nosotros trabajamos con marcas premium y ellos son el enlace perfecto para tener acceso a esas refacciones de calidad que no se consiguen fácil. Además, sus tiempos de entrega son buenísimos.",
    image: "/images/testimonials/lucia.webp"
  },
  {
    id: 3,
    name: "Raúl Ortega",
    location: "Distribuidor Ruta Libre Wear",
    content: "Cuando empezamos nuestra tienda, teníamos claro que queríamos ofrecer productos de marcas reconocidas, pero necesitábamos un proveedor que confiara en nuestro crecimiento. Motos y Equipos apostó por nosotros desde el día uno. Hoy somos distribuidores autorizados de varias marcas top, con buenos márgenes y apoyo constante.",
    image: "/images/testimonials/rulo.webp"
  }
];
---

<section id="testimonials" class="relative py-24 md:py-32 overflow-hidden">
  <div class="container mx-auto px-4 relative z-10">
    <!-- Encabezado -->
    <div class="text-center mb-8">
      <h2 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
        Testimoniales
      </h2>
      <p class="text-lg text-gray-600">
        Más de 5,000 distribuidores
      </p>
    </div>

    <!-- Carrusel de testimoniales -->
    <div class="testimonials-carousel relative mx-auto max-w-5xl lg:max-w-7xl px-2 md:px-6">
      <div class="carousel-viewport relative overflow-visible h-[220px] md:h-[420px]">
        <div class="carousel-track relative h-full">
          {testimonials.map((testimonial, index) => (
            <div 
              class="testimonial-card absolute w-[calc(100vw-2rem)] md:w-[400px] h-auto min-h-[200px] md:min-h-[380px] top-1/2 -translate-y-1/2 cursor-grab"
              data-testimonial-id={testimonial.id}
              data-index={index}
            >
              <div class="bg-white rounded-2xl md:rounded-3xl p-4 md:p-5 h-full flex flex-col relative shadow-lg hover:shadow-xl transition-shadow duration-300">
                <!-- Avatar centrado -->
                <div class="flex justify-center mb-3 md:mb-4">
                  <div class="relative">
                    <img 
                      src={testimonial.image}
                      alt={testimonial.name}
                      class="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover"
                    />
                  </div>
                </div>
                
                <!-- Contenido justificado a la izquierda -->
                <div class="text-left flex-1 flex flex-col justify-start overflow-hidden px-1">
                  <h3 class="text-lg md:text-xl font-bold text-gray-900 mb-1">
                    {testimonial.name}
                  </h3>
                  <p class="text-gray-600 text-xs mb-2">
                    {testimonial.location}
                  </p>
                  <p class="text-gray-700 leading-relaxed text-[10px] md:text-xs overflow-y-auto pr-1">
                    {testimonial.content}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  // Importar GSAP dinámicamente
  const { gsap } = await import("gsap");
  
  const carousel = document.querySelector('.testimonials-carousel') as HTMLElement;
  const viewport = document.querySelector('.carousel-viewport') as HTMLElement;
  const cards = Array.from(document.querySelectorAll('.testimonial-card')) as HTMLElement[];
  const totalCards = cards.length;
  
  let currentIndex = 0;
  let isDragging = false;
  let isTransitioning = false;
  let autoplayInterval: ReturnType<typeof setInterval>;
  let autoplayStopped = false;
  
  // Configuración responsive
  const getConfig = () => ({
    isMobile: window.innerWidth < 768,
    cardWidth: window.innerWidth < 768 ? window.innerWidth - 32 : 400,
    cardGap: window.innerWidth < 768 ? 30 : 60
  });
  
  let config = getConfig();

  // Actualizar carrusel
  function updateCarousel(animate = true) {
    const viewportWidth = viewport.offsetWidth;
    const center = viewportWidth / 2;
    config = getConfig();
    
    cards.forEach((card, index) => {
      // Calcular posición relativa
      let relativePosition = (index - currentIndex + totalCards) % totalCards;
      if (relativePosition > totalCards / 2) {
        relativePosition = relativePosition - totalCards;
      }
      
      // Calcular posición X
      let x = center + relativePosition * (config.cardWidth + config.cardGap) - config.cardWidth / 2;
      
      // Ajuste para móvil
      if (config.isMobile) {
        x = center - config.cardWidth / 2;
        if (relativePosition !== 0) {
          x = relativePosition > 0 ? viewportWidth + 50 : -config.cardWidth - 50;
        }
      }
      
      // Estados de la card
      const isActive = relativePosition === 0;
      const isSide = Math.abs(relativePosition) === 1;
      const isVisible = config.isMobile ? isActive : Math.abs(relativePosition) <= 1;
      
      // Animación
      const scaleValue = isActive ? 1.08 : (isSide ? 0.92 : 0.85);
      const yOffset = isActive ? -20 : 0;
      
      gsap.to(card, {
        x,
        y: yOffset,
        scale: config.isMobile && isActive ? 1 : scaleValue,
        opacity: isActive ? 1 : (isSide && !config.isMobile ? 0.85 : (isVisible ? 0.3 : 0)),
        zIndex: isActive ? 10 : (isSide ? 5 : 1),
        visibility: isVisible ? 'visible' : 'hidden',
        duration: animate ? 0.6 : 0,
        ease: "power2.out"
      });
      
      // Manejo de clases para CSS
      card.classList.remove('active', 'side', 'hidden');
      if (isActive) card.classList.add('active');
      else if (isSide && !config.isMobile) card.classList.add('side');
      else card.classList.add('hidden');
    });
  }

  // Navegación
  function moveToIndex(newIndex: number) {
    if (isTransitioning) return;
    isTransitioning = true;
    currentIndex = ((newIndex % totalCards) + totalCards) % totalCards;
    updateCarousel();
    setTimeout(() => { isTransitioning = false; }, 600);
  }

  function nextSlide() { moveToIndex(currentIndex + 1); }
  function prevSlide() { moveToIndex(currentIndex - 1); }

  // Autoplay
  function startAutoplay() {
    if (autoplayInterval) clearInterval(autoplayInterval);
    if (!autoplayStopped && !isDragging) {
      autoplayInterval = setInterval(nextSlide, 4000);
    }
  }

  function stopAutoplay() {
    if (autoplayInterval) clearInterval(autoplayInterval);
  }

  // Drag/Swipe
  let startX = 0, deltaX = 0;

  function handleStart(clientX: number) {
    if (isTransitioning) return;
    isDragging = true;
    startX = clientX;
    stopAutoplay();
  }

  function handleMove(clientX: number) {
    if (!isDragging) return;
    deltaX = clientX - startX;
    
    // Aplicar arrastre visual
    const dragAmount = deltaX * 0.8;
    const center = viewport.offsetWidth / 2;
    
    cards.forEach((card, index) => {
      let relativePosition = (index - currentIndex + totalCards) % totalCards;
      if (relativePosition > totalCards / 2) relativePosition -= totalCards;
      
      if (Math.abs(relativePosition) <= 1) {
        const baseX = center + relativePosition * (config.cardWidth + config.cardGap) - config.cardWidth / 2;
        gsap.set(card, { x: baseX + dragAmount });
      }
    });
  }

  function handleEnd() {
    if (!isDragging) return;
    isDragging = false;
    
    const threshold = config.cardWidth * 0.15;
    if (Math.abs(deltaX) > threshold) {
      deltaX < 0 ? nextSlide() : prevSlide();
    } else {
      updateCarousel();
    }
    
    setTimeout(startAutoplay, 1000);
  }

  // Event listeners
  carousel.addEventListener('mousedown', (e: MouseEvent) => {
    handleStart(e.clientX);
    carousel.classList.add('cursor-grabbing');
  });

  document.addEventListener('mousemove', (e: MouseEvent) => {
    if (isDragging) {
      e.preventDefault();
      handleMove(e.clientX);
    }
  });

  document.addEventListener('mouseup', () => {
    if (isDragging) {
      handleEnd();
      carousel.classList.remove('cursor-grabbing');
    }
  });

  // Touch events
  carousel.addEventListener('touchstart', (e: TouchEvent) => {
    handleStart(e.touches[0].clientX);
  }, { passive: true });

  carousel.addEventListener('touchmove', (e: TouchEvent) => {
    if (isDragging) handleMove(e.touches[0].clientX);
  }, { passive: true });

  carousel.addEventListener('touchend', handleEnd);

  // Hover pause
  carousel.addEventListener('mouseenter', () => {
    autoplayStopped = true;
    stopAutoplay();
  });

  carousel.addEventListener('mouseleave', () => {
    autoplayStopped = false;
    if (!isDragging) startAutoplay();
  });

  // Resize
  window.addEventListener('resize', () => {
    if (!isDragging && !isTransitioning) updateCarousel(false);
  });

  // Prevenir selección de texto
  carousel.addEventListener('selectstart', (e) => {
    if (isDragging) e.preventDefault();
  });

  // Inicialización
  updateCarousel(false);
  startAutoplay();
});
</script>

<style>
.testimonials-carousel {
  position: relative;
  width: 100%;
}

.testimonial-card {
  will-change: transform, opacity;
}

.testimonial-card:active {
  cursor: grabbing;
}

/* Ocultar cards que no sean visibles, pero mantener la activa en móvil */
@media (max-width: 767px) {
  .testimonial-card.side,
  .testimonial-card.hidden {
    display: none;
  }
}
</style>